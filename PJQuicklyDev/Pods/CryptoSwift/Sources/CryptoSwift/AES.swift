//
//  CryptoSwift
//
//  Copyright (C) 2014-2017 Marcin Krzy≈ºanowski <marcin@krzyzanowskim.com>
//  This software is provided 'as-is', without any express or implied warranty.
//
//  In no event will the authors be held liable for any damages arising from the use of this software.
//
//  Permission is granted to anyone to use this software for any purpose,including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:
//
//  - The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation is required.
//  - Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
//  - This notice may not be removed or altered from any source or binary distribution.
//

//  Implementation of Gladman algorithm http://www.gladman.me.uk/AES
//

/// The Advanced Encryption Standard (AES)
public final class AES: BlockCipher {
    public enum Error: Swift.Error {
        /// Invalid key
        case invalidKeySize
        /// Data padding is required
        case dataPaddingRequired
        /// Invalid Data
        case invalidData
    }

    public enum Variant: Int {
        case aes128 = 1, aes192, aes256

        var Nk: Int { // Nk words
            [4, 6, 8][rawValue - 1]
        }

        var Nb: Int { // Nb words
            4
        }

        var Nr: Int { // Nr
            Nk + 6
        }
    }

    private let variantNr: Int
    private let variantNb: Int
    private let variantNk: Int

    public static let blockSize: Int = 16 // 128 /8
    public let keySize: Int

    /// AES Variant
    public let variant: Variant

    // Parameters
    let key: Key
    let blockMode: BlockMode
    let padding: Padding

    //
    private lazy var expandedKey: [[UInt32]] = self.expandKey(self.key, variant: self.variant)
    private lazy var expandedKeyInv: [[UInt32]] = self.expandKeyInv(self.key, variant: self.variant)

    private lazy var sBoxes: (sBox: [UInt32], invSBox: [UInt32]) = self.calculateSBox()
    private lazy var sBox: [UInt32] = self.sBoxes.sBox
    private lazy var sBoxInv: [UInt32] = self.sBoxes.invSBox

    // Parameters for Linear Congruence Generators
    private static let Rcon: [UInt8] = [
        0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A,
        0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39,
        0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A,
        0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8,
        0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF,
        0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC,
        0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B,
        0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3,
        0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94,
        0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
        0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63, 0xC6, 0x97, 0x35,
        0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD, 0x61, 0xC2, 0x9F,
        0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D, 0x01, 0x02, 0x04,
        0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36, 0x6C, 0xD8, 0xAB, 0x4D, 0x9A, 0x2F, 0x5E, 0xBC, 0x63,
        0xC6, 0x97, 0x35, 0x6A, 0xD4, 0xB3, 0x7D, 0xFA, 0xEF, 0xC5, 0x91, 0x39, 0x72, 0xE4, 0xD3, 0xBD,
        0x61, 0xC2, 0x9F, 0x25, 0x4A, 0x94, 0x33, 0x66, 0xCC, 0x83, 0x1D, 0x3A, 0x74, 0xE8, 0xCB, 0x8D,
    ]

    private static let T0: [UInt32] = [0xA563_63C6, 0x847C_7CF8, 0x9977_77EE, 0x8D7B_7BF6, 0xDF2F2FF, 0xBD6B_6BD6, 0xB16F_6FDE, 0x54C5_C591, 0x5030_3060, 0x3010102, 0xA967_67CE, 0x7D2B_2B56, 0x19FE_FEE7, 0x62D7_D7B5, 0xE6AB_AB4D, 0x9A76_76EC, 0x45CA_CA8F, 0x9D82_821F, 0x40C9_C989, 0x877D_7DFA, 0x15FA_FAEF, 0xEB59_59B2, 0xC947_478E, 0xBF0F0FB, 0xECAD_AD41, 0x67D4_D4B3, 0xFDA2_A25F, 0xEAAF_AF45, 0xBF9C_9C23, 0xF7A4_A453, 0x9672_72E4, 0x5BC0_C09B, 0xC2B7_B775, 0x1CFD_FDE1, 0xAE93_933D, 0x6A26_264C, 0x5A36_366C, 0x413F_3F7E, 0x2F7F7F5, 0x4FCC_CC83, 0x5C34_3468, 0xF4A5_A551, 0x34E5_E5D1, 0x8F1F1F9, 0x9371_71E2, 0x73D8_D8AB, 0x5331_3162, 0x3F15_152A, 0xC040408, 0x52C7_C795, 0x6523_2346, 0x5EC3_C39D, 0x2818_1830, 0xA196_9637, 0xF05050A, 0xB59A_9A2F, 0x907070E, 0x3612_1224, 0x9B80_801B, 0x3DE2_E2DF, 0x26EB_EBCD, 0x6927_274E, 0xCDB2_B27F, 0x9F75_75EA, 0x1B09_0912, 0x9E83_831D, 0x742C_2C58, 0x2E1A_1A34, 0x2D1B_1B36, 0xB26E_6EDC, 0xEE5A_5AB4, 0xFBA0_A05B, 0xF652_52A4, 0x4D3B_3B76, 0x61D6_D6B7, 0xCEB3_B37D, 0x7B29_2952, 0x3EE3_E3DD, 0x712F_2F5E, 0x9784_8413, 0xF553_53A6, 0x68D1_D1B9, 0x0, 0x2CED_EDC1, 0x6020_2040, 0x1FFC_FCE3, 0xC8B1_B179, 0xED5B_5BB6, 0xBE6A_6AD4, 0x46CB_CB8D, 0xD9BE_BE67, 0x4B39_3972, 0xDE4A_4A94, 0xD44C_4C98, 0xE858_58B0, 0x4ACF_CF85, 0x6BD0_D0BB, 0x2AEF_EFC5, 0xE5AA_AA4F, 0x16FB_FBED, 0xC543_4386, 0xD74D_4D9A, 0x5533_3366, 0x9485_8511, 0xCF45_458A, 0x10F9_F9E9, 0x6020204, 0x817F_7FFE, 0xF050_50A0, 0x443C_3C78, 0xBA9F_9F25, 0xE3A8_A84B, 0xF351_51A2, 0xFEA3_A35D, 0xC040_4080, 0x8A8F_8F05, 0xAD92_923F, 0xBC9D_9D21, 0x4838_3870, 0x4F5F5F1, 0xDFBC_BC63, 0xC1B6_B677, 0x75DA_DAAF, 0x6321_2142, 0x3010_1020, 0x1AFF_FFE5, 0xEF3F3FD, 0x6DD2_D2BF, 0x4CCD_CD81, 0x140C_0C18, 0x3513_1326, 0x2FEC_ECC3, 0xE15F_5FBE, 0xA297_9735, 0xCC44_4488, 0x3917_172E, 0x57C4_C493, 0xF2A7_A755, 0x827E_7EFC, 0x473D_3D7A, 0xAC64_64C8, 0xE75D_5DBA, 0x2B19_1932, 0x9573_73E6, 0xA060_60C0, 0x9881_8119, 0xD14F_4F9E, 0x7FDC_DCA3, 0x6622_2244, 0x7E2A_2A54, 0xAB90_903B, 0x8388_880B, 0xCA46_468C, 0x29EE_EEC7, 0xD3B8_B86B, 0x3C14_1428, 0x79DE_DEA7, 0xE25E_5EBC, 0x1D0B_0B16, 0x76DB_DBAD, 0x3BE0_E0DB, 0x5632_3264, 0x4E3A_3A74, 0x1E0A_0A14, 0xDB49_4992, 0xA06060C, 0x6C24_2448, 0xE45C_5CB8, 0x5DC2_C29F, 0x6ED3_D3BD, 0xEFAC_AC43, 0xA662_62C4, 0xA891_9139, 0xA495_9531, 0x37E4_E4D3, 0x8B79_79F2, 0x32E7_E7D5, 0x43C8_C88B, 0x5937_376E, 0xB76D_6DDA, 0x8C8D_8D01, 0x64D5_D5B1, 0xD24E_4E9C, 0xE0A9_A949, 0xB46C_6CD8, 0xFA56_56AC, 0x7F4F4F3, 0x25EA_EACF, 0xAF65_65CA, 0x8E7A_7AF4, 0xE9AE_AE47, 0x1808_0810, 0xD5BA_BA6F, 0x8878_78F0, 0x6F25_254A, 0x722E_2E5C, 0x241C_1C38, 0xF1A6_A657, 0xC7B4_B473, 0x51C6_C697, 0x23E8_E8CB, 0x7CDD_DDA1, 0x9C74_74E8, 0x211F_1F3E, 0xDD4B_4B96, 0xDCBD_BD61, 0x868B_8B0D, 0x858A_8A0F, 0x9070_70E0, 0x423E_3E7C, 0xC4B5_B571, 0xAA66_66CC, 0xD848_4890, 0x5030306, 0x1F6F6F7, 0x120E_0E1C, 0xA361_61C2, 0x5F35_356A, 0xF957_57AE, 0xD0B9_B969, 0x9186_8617, 0x58C1_C199, 0x271D_1D3A, 0xB99E_9E27, 0x38E1_E1D9, 0x13F8_F8EB, 0xB398_982B, 0x3311_1122, 0xBB69_69D2, 0x70D9_D9A9, 0x898E_8E07, 0xA794_9433, 0xB69B_9B2D, 0x221E_1E3C, 0x9287_8715, 0x20E9_E9C9, 0x49CE_CE87, 0xFF55_55AA, 0x7828_2850, 0x7ADF_DFA5, 0x8F8C_8C03, 0xF8A1_A159, 0x8089_8909, 0x170D_0D1A, 0xDABF_BF65, 0x31E6_E6D7, 0xC642_4284, 0xB868_68D0, 0xC341_4182, 0xB099_9929, 0x772D_2D5A, 0x110F_0F1E, 0xCBB0_B07B, 0xFC54_54A8, 0xD6BB_BB6D, 0x3A16_162C]
    private static let T0_INV: [UInt32] = [0x50A7_F451, 0x5365_417E, 0xC3A4_171A, 0x965E_273A, 0xCB6B_AB3B, 0xF145_9D1F, 0xAB58_FAAC, 0x9303_E34B, 0x55FA_3020, 0xF66D_76AD, 0x9176_CC88, 0x254C_02F5, 0xFCD7_E54F, 0xD7CB_2AC5, 0x8044_3526, 0x8FA3_62B5, 0x495A_B1DE, 0x671B_BA25, 0x980E_EA45, 0xE1C0_FE5D, 0x2752FC3, 0x12F0_4C81, 0xA397_468D, 0xC6F9_D36B, 0xE75F_8F03, 0x959C_9215, 0xEB7A_6DBF, 0xDA59_5295, 0x2D83_BED4, 0xD321_7458, 0x2969_E049, 0x44C8_C98E, 0x6A89_C275, 0x7879_8EF4, 0x6B3E_5899, 0xDD71_B927, 0xB64F_E1BE, 0x17AD_88F0, 0x66AC_20C9, 0xB43A_CE7D, 0x184A_DF63, 0x8231_1AE5, 0x6033_5197, 0x457F_5362, 0xE077_64B1, 0x84AE_6BBB, 0x1CA0_81FE, 0x942B_08F9, 0x5868_4870, 0x19FD_458F, 0x876C_DE94, 0xB7F8_7B52, 0x23D3_73AB, 0xE202_4B72, 0x578F_1FE3, 0x2AAB_5566, 0x728EBB2, 0x3C2B52F, 0x9A7B_C586, 0xA508_37D3, 0xF287_2830, 0xB2A5_BF23, 0xBA6A_0302, 0x5C82_16ED, 0x2B1C_CF8A, 0x92B4_79A7, 0xF0F2_07F3, 0xA1E2_694E, 0xCDF4_DA65, 0xD5BE_0506, 0x1F62_34D1, 0x8AFE_A6C4, 0x9D53_2E34, 0xA055_F3A2, 0x32E1_8A05, 0x75EB_F6A4, 0x39EC_830B, 0xAAEF_6040, 0x69F715E, 0x5110_6EBD, 0xF98A_213E, 0x3D06_DD96, 0xAE05_3EDD, 0x46BD_E64D, 0xB58D_5491, 0x55DC471, 0x6FD4_0604, 0xFF15_5060, 0x24FB_9819, 0x97E9_BDD6, 0xCC43_4089, 0x779E_D967, 0xBD42_E8B0, 0x888B_8907, 0x385B_19E7, 0xDBEE_C879, 0x470A_7CA1, 0xE90F_427C, 0xC91E_84F8, 0x0, 0x8386_8009, 0x48ED_2B32, 0xAC70_111E, 0x4E72_5A6C, 0xFBFF_0EFD, 0x5638_850F, 0x1ED5_AE3D, 0x2739_2D36, 0x64D9_0F0A, 0x21A6_5C68, 0xD154_5B9B, 0x3A2E_3624, 0xB167_0A0C, 0xFE75793, 0xD296_EEB4, 0x9E91_9B1B, 0x4FC5_C080, 0xA220_DC61, 0x694B_775A, 0x161A_121C, 0xABA93E2, 0xE52A_A0C0, 0x43E0_223C, 0x1D17_1B12, 0xB0D090E, 0xADC7_8BF2, 0xB9A8_B62D, 0xC8A9_1E14, 0x8519_F157, 0x4C07_75AF, 0xBBDD_99EE, 0xFD60_7FA3, 0x9F26_01F7, 0xBCF5_725C, 0xC53B_6644, 0x347E_FB5B, 0x7629_438B, 0xDCC6_23CB, 0x68FC_EDB6, 0x63F1_E4B8, 0xCADC_31D7, 0x1085_6342, 0x4022_9713, 0x2011_C684, 0x7D24_4A85, 0xF83D_BBD2, 0x1132_F9AE, 0x6DA1_29C7, 0x4B2F_9E1D, 0xF330_B2DC, 0xEC52_860D, 0xD0E3_C177, 0x6C16_B32B, 0x99B9_70A9, 0xFA48_9411, 0x2264_E947, 0xC48C_FCA8, 0x1A3F_F0A0, 0xD82C_7D56, 0xEF90_3322, 0xC74E_4987, 0xC1D1_38D9, 0xFEA2_CA8C, 0x360B_D498, 0xCF81_F5A6, 0x28DE_7AA5, 0x268E_B7DA, 0xA4BF_AD3F, 0xE49D_3A2C, 0xD927850, 0x9BCC_5F6A, 0x6246_7E54, 0xC213_8DF6, 0xE8B8_D890, 0x5EF7_392E, 0xF5AF_C382, 0xBE80_5D9F, 0x7C93_D069, 0xA92D_D56F, 0xB312_25CF, 0x3B99_ACC8, 0xA77D_1810, 0x6E63_9CE8, 0x7BBB_3BDB, 0x97826CD, 0xF418_596E, 0x1B79AEC, 0xA89A_4F83, 0x656E_95E6, 0x7EE6_FFAA, 0x8CFBC21, 0xE6E8_15EF, 0xD99B_E7BA, 0xCE36_6F4A, 0xD409_9FEA, 0xD67C_B029, 0xAFB2_A431, 0x3123_3F2A, 0x3094_A5C6, 0xC066_A235, 0x37BC_4E74, 0xA6CA_82FC, 0xB0D0_90E0, 0x15D8_A733, 0x4A98_04F1, 0xF7DA_EC41, 0xE50CD7F, 0x2FF6_9117, 0x8DD6_4D76, 0x4DB0_EF43, 0x544D_AACC, 0xDF04_96E4, 0xE3B5_D19E, 0x1B88_6A4C, 0xB81F_2CC1, 0x7F51_6546, 0x4EA5E9D, 0x5D35_8C01, 0x7374_87FA, 0x2E41_0BFB, 0x5A1D_67B3, 0x52D2_DB92, 0x3356_10E9, 0x1347_D66D, 0x8C61_D79A, 0x7A0C_A137, 0x8E14_F859, 0x893C_13EB, 0xEE27_A9CE, 0x35C9_61B7, 0xEDE5_1CE1, 0x3CB1_477A, 0x59DF_D29C, 0x3F73_F255, 0x79CE_1418, 0xBF37_C773, 0xEACD_F753, 0x5BAA_FD5F, 0x146F_3DDF, 0x86DB_4478, 0x81F3_AFCA, 0x3EC4_68B9, 0x2C34_2438, 0x5F40_A3C2, 0x72C3_1D16, 0xC25E2BC, 0x8B49_3C28, 0x4195_0DFF, 0x7101_A839, 0xDEB3_0C08, 0x9CE4_B4D8, 0x90C1_5664, 0x6184_CB7B, 0x70B6_32D5, 0x745C_6C48, 0x4257_B8D0]
    private static let T1: [UInt32] = [0x6363_C6A5, 0x7C7C_F884, 0x7777_EE99, 0x7B7B_F68D, 0xF2F2_FF0D, 0x6B6B_D6BD, 0x6F6F_DEB1, 0xC5C5_9154, 0x3030_6050, 0x1010203, 0x6767_CEA9, 0x2B2B_567D, 0xFEFE_E719, 0xD7D7_B562, 0xABAB_4DE6, 0x7676_EC9A, 0xCACA_8F45, 0x8282_1F9D, 0xC9C9_8940, 0x7D7D_FA87, 0xFAFA_EF15, 0x5959_B2EB, 0x4747_8EC9, 0xF0F0_FB0B, 0xADAD_41EC, 0xD4D4_B367, 0xA2A2_5FFD, 0xAFAF_45EA, 0x9C9C_23BF, 0xA4A4_53F7, 0x7272_E496, 0xC0C0_9B5B, 0xB7B7_75C2, 0xFDFD_E11C, 0x9393_3DAE, 0x2626_4C6A, 0x3636_6C5A, 0x3F3F_7E41, 0xF7F7_F502, 0xCCCC_834F, 0x3434_685C, 0xA5A5_51F4, 0xE5E5_D134, 0xF1F1_F908, 0x7171_E293, 0xD8D8_AB73, 0x3131_6253, 0x1515_2A3F, 0x404080C, 0xC7C7_9552, 0x2323_4665, 0xC3C3_9D5E, 0x1818_3028, 0x9696_37A1, 0x5050A0F, 0x9A9A_2FB5, 0x7070E09, 0x1212_2436, 0x8080_1B9B, 0xE2E2_DF3D, 0xEBEB_CD26, 0x2727_4E69, 0xB2B2_7FCD, 0x7575_EA9F, 0x909121B, 0x8383_1D9E, 0x2C2C_5874, 0x1A1A_342E, 0x1B1B_362D, 0x6E6E_DCB2, 0x5A5A_B4EE, 0xA0A0_5BFB, 0x5252_A4F6, 0x3B3B_764D, 0xD6D6_B761, 0xB3B3_7DCE, 0x2929_527B, 0xE3E3_DD3E, 0x2F2F_5E71, 0x8484_1397, 0x5353_A6F5, 0xD1D1_B968, 0x0, 0xEDED_C12C, 0x2020_4060, 0xFCFC_E31F, 0xB1B1_79C8, 0x5B5B_B6ED, 0x6A6A_D4BE, 0xCBCB_8D46, 0xBEBE_67D9, 0x3939_724B, 0x4A4A_94DE, 0x4C4C_98D4, 0x5858_B0E8, 0xCFCF_854A, 0xD0D0_BB6B, 0xEFEF_C52A, 0xAAAA_4FE5, 0xFBFB_ED16, 0x4343_86C5, 0x4D4D_9AD7, 0x3333_6655, 0x8585_1194, 0x4545_8ACF, 0xF9F9_E910, 0x2020406, 0x7F7F_FE81, 0x5050_A0F0, 0x3C3C_7844, 0x9F9F_25BA, 0xA8A8_4BE3, 0x5151_A2F3, 0xA3A3_5DFE, 0x4040_80C0, 0x8F8F_058A, 0x9292_3FAD, 0x9D9D_21BC, 0x3838_7048, 0xF5F5_F104, 0xBCBC_63DF, 0xB6B6_77C1, 0xDADA_AF75, 0x2121_4263, 0x1010_2030, 0xFFFF_E51A, 0xF3F3_FD0E, 0xD2D2_BF6D, 0xCDCD_814C, 0xC0C1814, 0x1313_2635, 0xECEC_C32F, 0x5F5F_BEE1, 0x9797_35A2, 0x4444_88CC, 0x1717_2E39, 0xC4C4_9357, 0xA7A7_55F2, 0x7E7E_FC82, 0x3D3D_7A47, 0x6464_C8AC, 0x5D5D_BAE7, 0x1919_322B, 0x7373_E695, 0x6060_C0A0, 0x8181_1998, 0x4F4F_9ED1, 0xDCDC_A37F, 0x2222_4466, 0x2A2A_547E, 0x9090_3BAB, 0x8888_0B83, 0x4646_8CCA, 0xEEEE_C729, 0xB8B8_6BD3, 0x1414_283C, 0xDEDE_A779, 0x5E5E_BCE2, 0xB0B161D, 0xDBDB_AD76, 0xE0E0_DB3B, 0x3232_6456, 0x3A3A_744E, 0xA0A141E, 0x4949_92DB, 0x6060C0A, 0x2424_486C, 0x5C5C_B8E4, 0xC2C2_9F5D, 0xD3D3_BD6E, 0xACAC_43EF, 0x6262_C4A6, 0x9191_39A8, 0x9595_31A4, 0xE4E4_D337, 0x7979_F28B, 0xE7E7_D532, 0xC8C8_8B43, 0x3737_6E59, 0x6D6D_DAB7, 0x8D8D_018C, 0xD5D5_B164, 0x4E4E_9CD2, 0xA9A9_49E0, 0x6C6C_D8B4, 0x5656_ACFA, 0xF4F4_F307, 0xEAEA_CF25, 0x6565_CAAF, 0x7A7A_F48E, 0xAEAE_47E9, 0x8081018, 0xBABA_6FD5, 0x7878_F088, 0x2525_4A6F, 0x2E2E_5C72, 0x1C1C_3824, 0xA6A6_57F1, 0xB4B4_73C7, 0xC6C6_9751, 0xE8E8_CB23, 0xDDDD_A17C, 0x7474_E89C, 0x1F1F_3E21, 0x4B4B_96DD, 0xBDBD_61DC, 0x8B8B_0D86, 0x8A8A_0F85, 0x7070_E090, 0x3E3E_7C42, 0xB5B5_71C4, 0x6666_CCAA, 0x4848_90D8, 0x3030605, 0xF6F6_F701, 0xE0E1C12, 0x6161_C2A3, 0x3535_6A5F, 0x5757_AEF9, 0xB9B9_69D0, 0x8686_1791, 0xC1C1_9958, 0x1D1D_3A27, 0x9E9E_27B9, 0xE1E1_D938, 0xF8F8_EB13, 0x9898_2BB3, 0x1111_2233, 0x6969_D2BB, 0xD9D9_A970, 0x8E8E_0789, 0x9494_33A7, 0x9B9B_2DB6, 0x1E1E_3C22, 0x8787_1592, 0xE9E9_C920, 0xCECE_8749, 0x5555_AAFF, 0x2828_5078, 0xDFDF_A57A, 0x8C8C_038F, 0xA1A1_59F8, 0x8989_0980, 0xD0D1A17, 0xBFBF_65DA, 0xE6E6_D731, 0x4242_84C6, 0x6868_D0B8, 0x4141_82C3, 0x9999_29B0, 0x2D2D_5A77, 0xF0F1E11, 0xB0B0_7BCB, 0x5454_A8FC, 0xBBBB_6DD6, 0x1616_2C3A]
    private static let T1_INV: [UInt32] = [0xA7F4_5150, 0x6541_7E53, 0xA417_1AC3, 0x5E27_3A96, 0x6BAB_3BCB, 0x459D_1FF1, 0x58FA_ACAB, 0x3E34B93, 0xFA30_2055, 0x6D76_ADF6, 0x76CC_8891, 0x4C02_F525, 0xD7E5_4FFC, 0xCB2A_C5D7, 0x4435_2680, 0xA362_B58F, 0x5AB1_DE49, 0x1BBA_2567, 0xEEA4598, 0xC0FE_5DE1, 0x752F_C302, 0xF04C_8112, 0x9746_8DA3, 0xF9D3_6BC6, 0x5F8F_03E7, 0x9C92_1595, 0x7A6D_BFEB, 0x5952_95DA, 0x83BE_D42D, 0x2174_58D3, 0x69E0_4929, 0xC8C9_8E44, 0x89C2_756A, 0x798E_F478, 0x3E58_996B, 0x71B9_27DD, 0x4FE1_BEB6, 0xAD88_F017, 0xAC20_C966, 0x3ACE_7DB4, 0x4ADF_6318, 0x311A_E582, 0x3351_9760, 0x7F53_6245, 0x7764_B1E0, 0xAE6B_BB84, 0xA081_FE1C, 0x2B08_F994, 0x6848_7058, 0xFD45_8F19, 0x6CDE_9487, 0xF87B_52B7, 0xD373_AB23, 0x24B72E2, 0x8F1F_E357, 0xAB55_662A, 0x28EB_B207, 0xC2B5_2F03, 0x7BC5_869A, 0x837D3A5, 0x8728_30F2, 0xA5BF_23B2, 0x6A03_02BA, 0x8216_ED5C, 0x1CCF_8A2B, 0xB479_A792, 0xF207_F3F0, 0xE269_4EA1, 0xF4DA_65CD, 0xBE05_06D5, 0x6234_D11F, 0xFEA6_C48A, 0x532E_349D, 0x55F3_A2A0, 0xE18A_0532, 0xEBF6_A475, 0xEC83_0B39, 0xEF60_40AA, 0x9F71_5E06, 0x106E_BD51, 0x8A21_3EF9, 0x6DD963D, 0x53EDDAE, 0xBDE6_4D46, 0x8D54_91B5, 0x5DC4_7105, 0xD406_046F, 0x1550_60FF, 0xFB98_1924, 0xE9BD_D697, 0x4340_89CC, 0x9ED9_6777, 0x42E8_B0BD, 0x8B89_0788, 0x5B19_E738, 0xEEC8_79DB, 0xA7CA147, 0xF427CE9, 0x1E84_F8C9, 0x0, 0x8680_0983, 0xED2B_3248, 0x7011_1EAC, 0x725A_6C4E, 0xFF0E_FDFB, 0x3885_0F56, 0xD5AE_3D1E, 0x392D_3627, 0xD90F_0A64, 0xA65C_6821, 0x545B_9BD1, 0x2E36_243A, 0x670A_0CB1, 0xE757_930F, 0x96EE_B4D2, 0x919B_1B9E, 0xC5C0_804F, 0x20DC_61A2, 0x4B77_5A69, 0x1A12_1C16, 0xBA93_E20A, 0x2AA0_C0E5, 0xE022_3C43, 0x171B_121D, 0xD090E0B, 0xC78B_F2AD, 0xA8B6_2DB9, 0xA91E_14C8, 0x19F1_5785, 0x775AF4C, 0xDD99_EEBB, 0x607F_A3FD, 0x2601_F79F, 0xF572_5CBC, 0x3B66_44C5, 0x7EFB_5B34, 0x2943_8B76, 0xC623_CBDC, 0xFCED_B668, 0xF1E4_B863, 0xDC31_D7CA, 0x8563_4210, 0x2297_1340, 0x11C6_8420, 0x244A_857D, 0x3DBB_D2F8, 0x32F9_AE11, 0xA129_C76D, 0x2F9E_1D4B, 0x30B2_DCF3, 0x5286_0DEC, 0xE3C1_77D0, 0x16B3_2B6C, 0xB970_A999, 0x4894_11FA, 0x64E9_4722, 0x8CFC_A8C4, 0x3FF0_A01A, 0x2C7D_56D8, 0x9033_22EF, 0x4E49_87C7, 0xD138_D9C1, 0xA2CA_8CFE, 0xBD49836, 0x81F5_A6CF, 0xDE7A_A528, 0x8EB7_DA26, 0xBFAD_3FA4, 0x9D3A_2CE4, 0x9278_500D, 0xCC5F_6A9B, 0x467E_5462, 0x138D_F6C2, 0xB8D8_90E8, 0xF739_2E5E, 0xAFC3_82F5, 0x805D_9FBE, 0x93D0_697C, 0x2DD5_6FA9, 0x1225_CFB3, 0x99AC_C83B, 0x7D18_10A7, 0x639C_E86E, 0xBB3B_DB7B, 0x7826_CD09, 0x1859_6EF4, 0xB79A_EC01, 0x9A4F_83A8, 0x6E95_E665, 0xE6FF_AA7E, 0xCFBC_2108, 0xE815_EFE6, 0x9BE7_BAD9, 0x366F_4ACE, 0x99FEAD4, 0x7CB0_29D6, 0xB2A4_31AF, 0x233F_2A31, 0x94A5_C630, 0x66A2_35C0, 0xBC4E_7437, 0xCA82_FCA6, 0xD090_E0B0, 0xD8A7_3315, 0x9804_F14A, 0xDAEC_41F7, 0x50CD_7F0E, 0xF691_172F, 0xD64D_768D, 0xB0EF_434D, 0x4DAA_CC54, 0x496E4DF, 0xB5D1_9EE3, 0x886A_4C1B, 0x1F2C_C1B8, 0x5165_467F, 0xEA5E_9D04, 0x358C_015D, 0x7487_FA73, 0x410B_FB2E, 0x1D67_B35A, 0xD2DB_9252, 0x5610_E933, 0x47D6_6D13, 0x61D7_9A8C, 0xCA1377A, 0x14F8_598E, 0x3C13_EB89, 0x27A9_CEEE, 0xC961_B735, 0xE51C_E1ED, 0xB147_7A3C, 0xDFD2_9C59, 0x73F2_553F, 0xCE14_1879, 0x37C7_73BF, 0xCDF7_53EA, 0xAAFD_5F5B, 0x6F3D_DF14, 0xDB44_7886, 0xF3AF_CA81, 0xC468_B93E, 0x3424_382C, 0x40A3_C25F, 0xC31D_1672, 0x25E2_BC0C, 0x493C_288B, 0x950D_FF41, 0x1A83971, 0xB30C_08DE, 0xE4B4_D89C, 0xC156_6490, 0x84CB_7B61, 0xB632_D570, 0x5C6C_4874, 0x57B8_D042]
    private static let T2: [UInt32] = [0x63C6_A563, 0x7CF8_847C, 0x77EE_9977, 0x7BF6_8D7B, 0xF2FF_0DF2, 0x6BD6_BD6B, 0x6FDE_B16F, 0xC591_54C5, 0x3060_5030, 0x1020301, 0x67CE_A967, 0x2B56_7D2B, 0xFEE7_19FE, 0xD7B5_62D7, 0xAB4D_E6AB, 0x76EC_9A76, 0xCA8F_45CA, 0x821F_9D82, 0xC989_40C9, 0x7DFA_877D, 0xFAEF_15FA, 0x59B2_EB59, 0x478E_C947, 0xF0FB_0BF0, 0xAD41_ECAD, 0xD4B3_67D4, 0xA25F_FDA2, 0xAF45_EAAF, 0x9C23_BF9C, 0xA453_F7A4, 0x72E4_9672, 0xC09B_5BC0, 0xB775_C2B7, 0xFDE1_1CFD, 0x933D_AE93, 0x264C_6A26, 0x366C_5A36, 0x3F7E_413F, 0xF7F5_02F7, 0xCC83_4FCC, 0x3468_5C34, 0xA551_F4A5, 0xE5D1_34E5, 0xF1F9_08F1, 0x71E2_9371, 0xD8AB_73D8, 0x3162_5331, 0x152A_3F15, 0x4080C04, 0xC795_52C7, 0x2346_6523, 0xC39D_5EC3, 0x1830_2818, 0x9637_A196, 0x50A0F05, 0x9A2F_B59A, 0x70E0907, 0x1224_3612, 0x801B_9B80, 0xE2DF_3DE2, 0xEBCD_26EB, 0x274E_6927, 0xB27F_CDB2, 0x75EA_9F75, 0x9121B09, 0x831D_9E83, 0x2C58_742C, 0x1A34_2E1A, 0x1B36_2D1B, 0x6EDC_B26E, 0x5AB4_EE5A, 0xA05B_FBA0, 0x52A4_F652, 0x3B76_4D3B, 0xD6B7_61D6, 0xB37D_CEB3, 0x2952_7B29, 0xE3DD_3EE3, 0x2F5E_712F, 0x8413_9784, 0x53A6_F553, 0xD1B9_68D1, 0x0, 0xEDC1_2CED, 0x2040_6020, 0xFCE3_1FFC, 0xB179_C8B1, 0x5BB6_ED5B, 0x6AD4_BE6A, 0xCB8D_46CB, 0xBE67_D9BE, 0x3972_4B39, 0x4A94_DE4A, 0x4C98_D44C, 0x58B0_E858, 0xCF85_4ACF, 0xD0BB_6BD0, 0xEFC5_2AEF, 0xAA4F_E5AA, 0xFBED_16FB, 0x4386_C543, 0x4D9A_D74D, 0x3366_5533, 0x8511_9485, 0x458A_CF45, 0xF9E9_10F9, 0x2040602, 0x7FFE_817F, 0x50A0_F050, 0x3C78_443C, 0x9F25_BA9F, 0xA84B_E3A8, 0x51A2_F351, 0xA35D_FEA3, 0x4080_C040, 0x8F05_8A8F, 0x923F_AD92, 0x9D21_BC9D, 0x3870_4838, 0xF5F1_04F5, 0xBC63_DFBC, 0xB677_C1B6, 0xDAAF_75DA, 0x2142_6321, 0x1020_3010, 0xFFE5_1AFF, 0xF3FD_0EF3, 0xD2BF_6DD2, 0xCD81_4CCD, 0xC18140C, 0x1326_3513, 0xECC3_2FEC, 0x5FBE_E15F, 0x9735_A297, 0x4488_CC44, 0x172E_3917, 0xC493_57C4, 0xA755_F2A7, 0x7EFC_827E, 0x3D7A_473D, 0x64C8_AC64, 0x5DBA_E75D, 0x1932_2B19, 0x73E6_9573, 0x60C0_A060, 0x8119_9881, 0x4F9E_D14F, 0xDCA3_7FDC, 0x2244_6622, 0x2A54_7E2A, 0x903B_AB90, 0x880B_8388, 0x468C_CA46, 0xEEC7_29EE, 0xB86B_D3B8, 0x1428_3C14, 0xDEA7_79DE, 0x5EBC_E25E, 0xB161D0B, 0xDBAD_76DB, 0xE0DB_3BE0, 0x3264_5632, 0x3A74_4E3A, 0xA141E0A, 0x4992_DB49, 0x60C0A06, 0x2448_6C24, 0x5CB8_E45C, 0xC29F_5DC2, 0xD3BD_6ED3, 0xAC43_EFAC, 0x62C4_A662, 0x9139_A891, 0x9531_A495, 0xE4D3_37E4, 0x79F2_8B79, 0xE7D5_32E7, 0xC88B_43C8, 0x376E_5937, 0x6DDA_B76D, 0x8D01_8C8D, 0xD5B1_64D5, 0x4E9C_D24E, 0xA949_E0A9, 0x6CD8_B46C, 0x56AC_FA56, 0xF4F3_07F4, 0xEACF_25EA, 0x65CA_AF65, 0x7AF4_8E7A, 0xAE47_E9AE, 0x8101808, 0xBA6F_D5BA, 0x78F0_8878, 0x254A_6F25, 0x2E5C_722E, 0x1C38_241C, 0xA657_F1A6, 0xB473_C7B4, 0xC697_51C6, 0xE8CB_23E8, 0xDDA1_7CDD, 0x74E8_9C74, 0x1F3E_211F, 0x4B96_DD4B, 0xBD61_DCBD, 0x8B0D_868B, 0x8A0F_858A, 0x70E0_9070, 0x3E7C_423E, 0xB571_C4B5, 0x66CC_AA66, 0x4890_D848, 0x3060503, 0xF6F7_01F6, 0xE1C120E, 0x61C2_A361, 0x356A_5F35, 0x57AE_F957, 0xB969_D0B9, 0x8617_9186, 0xC199_58C1, 0x1D3A_271D, 0x9E27_B99E, 0xE1D9_38E1, 0xF8EB_13F8, 0x982B_B398, 0x1122_3311, 0x69D2_BB69, 0xD9A9_70D9, 0x8E07_898E, 0x9433_A794, 0x9B2D_B69B, 0x1E3C_221E, 0x8715_9287, 0xE9C9_20E9, 0xCE87_49CE, 0x55AA_FF55, 0x2850_7828, 0xDFA5_7ADF, 0x8C03_8F8C, 0xA159_F8A1, 0x8909_8089, 0xD1A170D, 0xBF65_DABF, 0xE6D7_31E6, 0x4284_C642, 0x68D0_B868, 0x4182_C341, 0x9929_B099, 0x2D5A_772D, 0xF1E110F, 0xB07B_CBB0, 0x54A8_FC54, 0xBB6D_D6BB, 0x162C_3A16]
    private static let T2_INV: [UInt32] = [0xF451_50A7, 0x417E_5365, 0x171A_C3A4, 0x273A_965E, 0xAB3B_CB6B, 0x9D1F_F145, 0xFAAC_AB58, 0xE34B_9303, 0x3020_55FA, 0x76AD_F66D, 0xCC88_9176, 0x2F5254C, 0xE54F_FCD7, 0x2AC5_D7CB, 0x3526_8044, 0x62B5_8FA3, 0xB1DE_495A, 0xBA25_671B, 0xEA45_980E, 0xFE5D_E1C0, 0x2FC3_0275, 0x4C81_12F0, 0x468D_A397, 0xD36B_C6F9, 0x8F03_E75F, 0x9215_959C, 0x6DBF_EB7A, 0x5295_DA59, 0xBED4_2D83, 0x7458_D321, 0xE049_2969, 0xC98E_44C8, 0xC275_6A89, 0x8EF4_7879, 0x5899_6B3E, 0xB927_DD71, 0xE1BE_B64F, 0x88F0_17AD, 0x20C9_66AC, 0xCE7D_B43A, 0xDF63_184A, 0x1AE5_8231, 0x5197_6033, 0x5362_457F, 0x64B1_E077, 0x6BBB_84AE, 0x81FE_1CA0, 0x8F9942B, 0x4870_5868, 0x458F_19FD, 0xDE94_876C, 0x7B52_B7F8, 0x73AB_23D3, 0x4B72_E202, 0x1FE3_578F, 0x5566_2AAB, 0xEBB2_0728, 0xB52F_03C2, 0xC586_9A7B, 0x37D3_A508, 0x2830_F287, 0xBF23_B2A5, 0x302BA6A, 0x16ED_5C82, 0xCF8A_2B1C, 0x79A7_92B4, 0x7F3F0F2, 0x694E_A1E2, 0xDA65_CDF4, 0x506D5BE, 0x34D1_1F62, 0xA6C4_8AFE, 0x2E34_9D53, 0xF3A2_A055, 0x8A05_32E1, 0xF6A4_75EB, 0x830B_39EC, 0x6040_AAEF, 0x715E_069F, 0x6EBD_5110, 0x213E_F98A, 0xDD96_3D06, 0x3EDD_AE05, 0xE64D_46BD, 0x5491_B58D, 0xC471_055D, 0x6046FD4, 0x5060_FF15, 0x9819_24FB, 0xBDD6_97E9, 0x4089_CC43, 0xD967_779E, 0xE8B0_BD42, 0x8907_888B, 0x19E7_385B, 0xC879_DBEE, 0x7CA1_470A, 0x427C_E90F, 0x84F8_C91E, 0x0, 0x8009_8386, 0x2B32_48ED, 0x111E_AC70, 0x5A6C_4E72, 0xEFDFBFF, 0x850F_5638, 0xAE3D_1ED5, 0x2D36_2739, 0xF0A64D9, 0x5C68_21A6, 0x5B9B_D154, 0x3624_3A2E, 0xA0CB167, 0x5793_0FE7, 0xEEB4_D296, 0x9B1B_9E91, 0xC080_4FC5, 0xDC61_A220, 0x775A_694B, 0x121C_161A, 0x93E2_0ABA, 0xA0C0_E52A, 0x223C_43E0, 0x1B12_1D17, 0x90E0B0D, 0x8BF2_ADC7, 0xB62D_B9A8, 0x1E14_C8A9, 0xF157_8519, 0x75AF_4C07, 0x99EE_BBDD, 0x7FA3_FD60, 0x1F79F26, 0x725C_BCF5, 0x6644_C53B, 0xFB5B_347E, 0x438B_7629, 0x23CB_DCC6, 0xEDB6_68FC, 0xE4B8_63F1, 0x31D7_CADC, 0x6342_1085, 0x9713_4022, 0xC684_2011, 0x4A85_7D24, 0xBBD2_F83D, 0xF9AE_1132, 0x29C7_6DA1, 0x9E1D_4B2F, 0xB2DC_F330, 0x860D_EC52, 0xC177_D0E3, 0xB32B_6C16, 0x70A9_99B9, 0x9411_FA48, 0xE947_2264, 0xFCA8_C48C, 0xF0A0_1A3F, 0x7D56_D82C, 0x3322_EF90, 0x4987_C74E, 0x38D9_C1D1, 0xCA8C_FEA2, 0xD498_360B, 0xF5A6_CF81, 0x7AA5_28DE, 0xB7DA_268E, 0xAD3F_A4BF, 0x3A2C_E49D, 0x7850_0D92, 0x5F6A_9BCC, 0x7E54_6246, 0x8DF6_C213, 0xD890_E8B8, 0x392E_5EF7, 0xC382_F5AF, 0x5D9F_BE80, 0xD069_7C93, 0xD56F_A92D, 0x25CF_B312, 0xACC8_3B99, 0x1810_A77D, 0x9CE8_6E63, 0x3BDB_7BBB, 0x26CD_0978, 0x596E_F418, 0x9AEC_01B7, 0x4F83_A89A, 0x95E6_656E, 0xFFAA_7EE6, 0xBC21_08CF, 0x15EF_E6E8, 0xE7BA_D99B, 0x6F4A_CE36, 0x9FEA_D409, 0xB029_D67C, 0xA431_AFB2, 0x3F2A_3123, 0xA5C6_3094, 0xA235_C066, 0x4E74_37BC, 0x82FC_A6CA, 0x90E0_B0D0, 0xA733_15D8, 0x4F14A98, 0xEC41_F7DA, 0xCD7F_0E50, 0x9117_2FF6, 0x4D76_8DD6, 0xEF43_4DB0, 0xAACC_544D, 0x96E4_DF04, 0xD19E_E3B5, 0x6A4C_1B88, 0x2CC1_B81F, 0x6546_7F51, 0x5E9D_04EA, 0x8C01_5D35, 0x87FA_7374, 0xBFB2E41, 0x67B3_5A1D, 0xDB92_52D2, 0x10E9_3356, 0xD66D_1347, 0xD79A_8C61, 0xA137_7A0C, 0xF859_8E14, 0x13EB_893C, 0xA9CE_EE27, 0x61B7_35C9, 0x1CE1_EDE5, 0x477A_3CB1, 0xD29C_59DF, 0xF255_3F73, 0x1418_79CE, 0xC773_BF37, 0xF753_EACD, 0xFD5F_5BAA, 0x3DDF_146F, 0x4478_86DB, 0xAFCA_81F3, 0x68B9_3EC4, 0x2438_2C34, 0xA3C2_5F40, 0x1D16_72C3, 0xE2BC_0C25, 0x3C28_8B49, 0xDFF4195, 0xA839_7101, 0xC08DEB3, 0xB4D8_9CE4, 0x5664_90C1, 0xCB7B_6184, 0x32D5_70B6, 0x6C48_745C, 0xB8D0_4257]
    private static let T3: [UInt32] = [0xC6A5_6363, 0xF884_7C7C, 0xEE99_7777, 0xF68D_7B7B, 0xFF0D_F2F2, 0xD6BD_6B6B, 0xDEB1_6F6F, 0x9154_C5C5, 0x6050_3030, 0x2030101, 0xCEA9_6767, 0x567D_2B2B, 0xE719_FEFE, 0xB562_D7D7, 0x4DE6_ABAB, 0xEC9A_7676, 0x8F45_CACA, 0x1F9D_8282, 0x8940_C9C9, 0xFA87_7D7D, 0xEF15_FAFA, 0xB2EB_5959, 0x8EC9_4747, 0xFB0B_F0F0, 0x41EC_ADAD, 0xB367_D4D4, 0x5FFD_A2A2, 0x45EA_AFAF, 0x23BF_9C9C, 0x53F7_A4A4, 0xE496_7272, 0x9B5B_C0C0, 0x75C2_B7B7, 0xE11C_FDFD, 0x3DAE_9393, 0x4C6A_2626, 0x6C5A_3636, 0x7E41_3F3F, 0xF502_F7F7, 0x834F_CCCC, 0x685C_3434, 0x51F4_A5A5, 0xD134_E5E5, 0xF908_F1F1, 0xE293_7171, 0xAB73_D8D8, 0x6253_3131, 0x2A3F_1515, 0x80C0404, 0x9552_C7C7, 0x4665_2323, 0x9D5E_C3C3, 0x3028_1818, 0x37A1_9696, 0xA0F0505, 0x2FB5_9A9A, 0xE090707, 0x2436_1212, 0x1B9B_8080, 0xDF3D_E2E2, 0xCD26_EBEB, 0x4E69_2727, 0x7FCD_B2B2, 0xEA9F_7575, 0x121B_0909, 0x1D9E_8383, 0x5874_2C2C, 0x342E_1A1A, 0x362D_1B1B, 0xDCB2_6E6E, 0xB4EE_5A5A, 0x5BFB_A0A0, 0xA4F6_5252, 0x764D_3B3B, 0xB761_D6D6, 0x7DCE_B3B3, 0x527B_2929, 0xDD3E_E3E3, 0x5E71_2F2F, 0x1397_8484, 0xA6F5_5353, 0xB968_D1D1, 0x0, 0xC12C_EDED, 0x4060_2020, 0xE31F_FCFC, 0x79C8_B1B1, 0xB6ED_5B5B, 0xD4BE_6A6A, 0x8D46_CBCB, 0x67D9_BEBE, 0x724B_3939, 0x94DE_4A4A, 0x98D4_4C4C, 0xB0E8_5858, 0x854A_CFCF, 0xBB6B_D0D0, 0xC52A_EFEF, 0x4FE5_AAAA, 0xED16_FBFB, 0x86C5_4343, 0x9AD7_4D4D, 0x6655_3333, 0x1194_8585, 0x8ACF_4545, 0xE910_F9F9, 0x4060202, 0xFE81_7F7F, 0xA0F0_5050, 0x7844_3C3C, 0x25BA_9F9F, 0x4BE3_A8A8, 0xA2F3_5151, 0x5DFE_A3A3, 0x80C0_4040, 0x58A8F8F, 0x3FAD_9292, 0x21BC_9D9D, 0x7048_3838, 0xF104_F5F5, 0x63DF_BCBC, 0x77C1_B6B6, 0xAF75_DADA, 0x4263_2121, 0x2030_1010, 0xE51A_FFFF, 0xFD0E_F3F3, 0xBF6D_D2D2, 0x814C_CDCD, 0x1814_0C0C, 0x2635_1313, 0xC32F_ECEC, 0xBEE1_5F5F, 0x35A2_9797, 0x88CC_4444, 0x2E39_1717, 0x9357_C4C4, 0x55F2_A7A7, 0xFC82_7E7E, 0x7A47_3D3D, 0xC8AC_6464, 0xBAE7_5D5D, 0x322B_1919, 0xE695_7373, 0xC0A0_6060, 0x1998_8181, 0x9ED1_4F4F, 0xA37F_DCDC, 0x4466_2222, 0x547E_2A2A, 0x3BAB_9090, 0xB838888, 0x8CCA_4646, 0xC729_EEEE, 0x6BD3_B8B8, 0x283C_1414, 0xA779_DEDE, 0xBCE2_5E5E, 0x161D_0B0B, 0xAD76_DBDB, 0xDB3B_E0E0, 0x6456_3232, 0x744E_3A3A, 0x141E_0A0A, 0x92DB_4949, 0xC0A0606, 0x486C_2424, 0xB8E4_5C5C, 0x9F5D_C2C2, 0xBD6E_D3D3, 0x43EF_ACAC, 0xC4A6_6262, 0x39A8_9191, 0x31A4_9595, 0xD337_E4E4, 0xF28B_7979, 0xD532_E7E7, 0x8B43_C8C8, 0x6E59_3737, 0xDAB7_6D6D, 0x18C8D8D, 0xB164_D5D5, 0x9CD2_4E4E, 0x49E0_A9A9, 0xD8B4_6C6C, 0xACFA_5656, 0xF307_F4F4, 0xCF25_EAEA, 0xCAAF_6565, 0xF48E_7A7A, 0x47E9_AEAE, 0x1018_0808, 0x6FD5_BABA, 0xF088_7878, 0x4A6F_2525, 0x5C72_2E2E, 0x3824_1C1C, 0x57F1_A6A6, 0x73C7_B4B4, 0x9751_C6C6, 0xCB23_E8E8, 0xA17C_DDDD, 0xE89C_7474, 0x3E21_1F1F, 0x96DD_4B4B, 0x61DC_BDBD, 0xD868B8B, 0xF858A8A, 0xE090_7070, 0x7C42_3E3E, 0x71C4_B5B5, 0xCCAA_6666, 0x90D8_4848, 0x6050303, 0xF701_F6F6, 0x1C12_0E0E, 0xC2A3_6161, 0x6A5F_3535, 0xAEF9_5757, 0x69D0_B9B9, 0x1791_8686, 0x9958_C1C1, 0x3A27_1D1D, 0x27B9_9E9E, 0xD938_E1E1, 0xEB13_F8F8, 0x2BB3_9898, 0x2233_1111, 0xD2BB_6969, 0xA970_D9D9, 0x7898E8E, 0x33A7_9494, 0x2DB6_9B9B, 0x3C22_1E1E, 0x1592_8787, 0xC920_E9E9, 0x8749_CECE, 0xAAFF_5555, 0x5078_2828, 0xA57A_DFDF, 0x38F8C8C, 0x59F8_A1A1, 0x9808989, 0x1A17_0D0D, 0x65DA_BFBF, 0xD731_E6E6, 0x84C6_4242, 0xD0B8_6868, 0x82C3_4141, 0x29B0_9999, 0x5A77_2D2D, 0x1E11_0F0F, 0x7BCB_B0B0, 0xA8FC_5454, 0x6DD6_BBBB, 0x2C3A_1616]
    private static let T3_INV: [UInt32] = [0x5150_A7F4, 0x7E53_6541, 0x1AC3_A417, 0x3A96_5E27, 0x3BCB_6BAB, 0x1FF1_459D, 0xACAB_58FA, 0x4B93_03E3, 0x2055_FA30, 0xADF6_6D76, 0x8891_76CC, 0xF525_4C02, 0x4FFC_D7E5, 0xC5D7_CB2A, 0x2680_4435, 0xB58F_A362, 0xDE49_5AB1, 0x2567_1BBA, 0x4598_0EEA, 0x5DE1_C0FE, 0xC302_752F, 0x8112_F04C, 0x8DA3_9746, 0x6BC6_F9D3, 0x3E75F8F, 0x1595_9C92, 0xBFEB_7A6D, 0x95DA_5952, 0xD42D_83BE, 0x58D3_2174, 0x4929_69E0, 0x8E44_C8C9, 0x756A_89C2, 0xF478_798E, 0x996B_3E58, 0x27DD_71B9, 0xBEB6_4FE1, 0xF017_AD88, 0xC966_AC20, 0x7DB4_3ACE, 0x6318_4ADF, 0xE582_311A, 0x9760_3351, 0x6245_7F53, 0xB1E0_7764, 0xBB84_AE6B, 0xFE1C_A081, 0xF994_2B08, 0x7058_6848, 0x8F19_FD45, 0x9487_6CDE, 0x52B7_F87B, 0xAB23_D373, 0x72E2_024B, 0xE357_8F1F, 0x662A_AB55, 0xB207_28EB, 0x2F03_C2B5, 0x869A_7BC5, 0xD3A5_0837, 0x30F2_8728, 0x23B2_A5BF, 0x2BA6A03, 0xED5C_8216, 0x8A2B_1CCF, 0xA792_B479, 0xF3F0_F207, 0x4EA1_E269, 0x65CD_F4DA, 0x6D5BE05, 0xD11F_6234, 0xC48A_FEA6, 0x349D_532E, 0xA2A0_55F3, 0x532E18A, 0xA475_EBF6, 0xB39EC83, 0x40AA_EF60, 0x5E06_9F71, 0xBD51_106E, 0x3EF9_8A21, 0x963D_06DD, 0xDDAE_053E, 0x4D46_BDE6, 0x91B5_8D54, 0x7105_5DC4, 0x46FD406, 0x60FF_1550, 0x1924_FB98, 0xD697_E9BD, 0x89CC_4340, 0x6777_9ED9, 0xB0BD_42E8, 0x7888B89, 0xE738_5B19, 0x79DB_EEC8, 0xA147_0A7C, 0x7CE9_0F42, 0xF8C9_1E84, 0x0, 0x9838680, 0x3248_ED2B, 0x1EAC_7011, 0x6C4E_725A, 0xFDFB_FF0E, 0xF563885, 0x3D1E_D5AE, 0x3627_392D, 0xA64D90F, 0x6821_A65C, 0x9BD1_545B, 0x243A_2E36, 0xCB1670A, 0x930F_E757, 0xB4D2_96EE, 0x1B9E_919B, 0x804F_C5C0, 0x61A2_20DC, 0x5A69_4B77, 0x1C16_1A12, 0xE20A_BA93, 0xC0E5_2AA0, 0x3C43_E022, 0x121D_171B, 0xE0B0D09, 0xF2AD_C78B, 0x2DB9_A8B6, 0x14C8_A91E, 0x5785_19F1, 0xAF4C_0775, 0xEEBB_DD99, 0xA3FD_607F, 0xF79F_2601, 0x5CBC_F572, 0x44C5_3B66, 0x5B34_7EFB, 0x8B76_2943, 0xCBDC_C623, 0xB668_FCED, 0xB863_F1E4, 0xD7CA_DC31, 0x4210_8563, 0x1340_2297, 0x8420_11C6, 0x857D_244A, 0xD2F8_3DBB, 0xAE11_32F9, 0xC76D_A129, 0x1D4B_2F9E, 0xDCF3_30B2, 0xDEC5286, 0x77D0_E3C1, 0x2B6C_16B3, 0xA999_B970, 0x11FA_4894, 0x4722_64E9, 0xA8C4_8CFC, 0xA01A_3FF0, 0x56D8_2C7D, 0x22EF_9033, 0x87C7_4E49, 0xD9C1_D138, 0x8CFE_A2CA, 0x9836_0BD4, 0xA6CF_81F5, 0xA528_DE7A, 0xDA26_8EB7, 0x3FA4_BFAD, 0x2CE4_9D3A, 0x500D_9278, 0x6A9B_CC5F, 0x5462_467E, 0xF6C2_138D, 0x90E8_B8D8, 0x2E5E_F739, 0x82F5_AFC3, 0x9FBE_805D, 0x697C_93D0, 0x6FA9_2DD5, 0xCFB3_1225, 0xC83B_99AC, 0x10A7_7D18, 0xE86E_639C, 0xDB7B_BB3B, 0xCD09_7826, 0x6EF4_1859, 0xEC01_B79A, 0x83A8_9A4F, 0xE665_6E95, 0xAA7E_E6FF, 0x2108_CFBC, 0xEFE6_E815, 0xBAD9_9BE7, 0x4ACE_366F, 0xEAD4_099F, 0x29D6_7CB0, 0x31AF_B2A4, 0x2A31_233F, 0xC630_94A5, 0x35C0_66A2, 0x7437_BC4E, 0xFCA6_CA82, 0xE0B0_D090, 0x3315_D8A7, 0xF14A_9804, 0x41F7_DAEC, 0x7F0E_50CD, 0x172F_F691, 0x768D_D64D, 0x434D_B0EF, 0xCC54_4DAA, 0xE4DF_0496, 0x9EE3_B5D1, 0x4C1B_886A, 0xC1B8_1F2C, 0x467F_5165, 0x9D04_EA5E, 0x15D358C, 0xFA73_7487, 0xFB2E_410B, 0xB35A_1D67, 0x9252_D2DB, 0xE933_5610, 0x6D13_47D6, 0x9A8C_61D7, 0x377A_0CA1, 0x598E_14F8, 0xEB89_3C13, 0xCEEE_27A9, 0xB735_C961, 0xE1ED_E51C, 0x7A3C_B147, 0x9C59_DFD2, 0x553F_73F2, 0x1879_CE14, 0x73BF_37C7, 0x53EA_CDF7, 0x5F5B_AAFD, 0xDF14_6F3D, 0x7886_DB44, 0xCA81_F3AF, 0xB93E_C468, 0x382C_3424, 0xC25F_40A3, 0x1672_C31D, 0xBC0C_25E2, 0x288B_493C, 0xFF41_950D, 0x3971_01A8, 0x8DEB30C, 0xD89C_E4B4, 0x6490_C156, 0x7B61_84CB, 0xD570_B632, 0x4874_5C6C, 0xD042_57B8]
    private static let U1: [UInt32] = [0x0, 0xB0D090E, 0x161A_121C, 0x1D17_1B12, 0x2C34_2438, 0x2739_2D36, 0x3A2E_3624, 0x3123_3F2A, 0x5868_4870, 0x5365_417E, 0x4E72_5A6C, 0x457F_5362, 0x745C_6C48, 0x7F51_6546, 0x6246_7E54, 0x694B_775A, 0xB0D0_90E0, 0xBBDD_99EE, 0xA6CA_82FC, 0xADC7_8BF2, 0x9CE4_B4D8, 0x97E9_BDD6, 0x8AFE_A6C4, 0x81F3_AFCA, 0xE8B8_D890, 0xE3B5_D19E, 0xFEA2_CA8C, 0xF5AF_C382, 0xC48C_FCA8, 0xCF81_F5A6, 0xD296_EEB4, 0xD99B_E7BA, 0x7BBB_3BDB, 0x70B6_32D5, 0x6DA1_29C7, 0x66AC_20C9, 0x578F_1FE3, 0x5C82_16ED, 0x4195_0DFF, 0x4A98_04F1, 0x23D3_73AB, 0x28DE_7AA5, 0x35C9_61B7, 0x3EC4_68B9, 0xFE75793, 0x4EA5E9D, 0x19FD_458F, 0x12F0_4C81, 0xCB6B_AB3B, 0xC066_A235, 0xDD71_B927, 0xD67C_B029, 0xE75F_8F03, 0xEC52_860D, 0xF145_9D1F, 0xFA48_9411, 0x9303_E34B, 0x980E_EA45, 0x8519_F157, 0x8E14_F859, 0xBF37_C773, 0xB43A_CE7D, 0xA92D_D56F, 0xA220_DC61, 0xF66D_76AD, 0xFD60_7FA3, 0xE077_64B1, 0xEB7A_6DBF, 0xDA59_5295, 0xD154_5B9B, 0xCC43_4089, 0xC74E_4987, 0xAE05_3EDD, 0xA508_37D3, 0xB81F_2CC1, 0xB312_25CF, 0x8231_1AE5, 0x893C_13EB, 0x942B_08F9, 0x9F26_01F7, 0x46BD_E64D, 0x4DB0_EF43, 0x50A7_F451, 0x5BAA_FD5F, 0x6A89_C275, 0x6184_CB7B, 0x7C93_D069, 0x779E_D967, 0x1ED5_AE3D, 0x15D8_A733, 0x8CFBC21, 0x3C2B52F, 0x32E1_8A05, 0x39EC_830B, 0x24FB_9819, 0x2FF6_9117, 0x8DD6_4D76, 0x86DB_4478, 0x9BCC_5F6A, 0x90C1_5664, 0xA1E2_694E, 0xAAEF_6040, 0xB7F8_7B52, 0xBCF5_725C, 0xD5BE_0506, 0xDEB3_0C08, 0xC3A4_171A, 0xC8A9_1E14, 0xF98A_213E, 0xF287_2830, 0xEF90_3322, 0xE49D_3A2C, 0x3D06_DD96, 0x360B_D498, 0x2B1C_CF8A, 0x2011_C684, 0x1132_F9AE, 0x1A3F_F0A0, 0x728EBB2, 0xC25E2BC, 0x656E_95E6, 0x6E63_9CE8, 0x7374_87FA, 0x7879_8EF4, 0x495A_B1DE, 0x4257_B8D0, 0x5F40_A3C2, 0x544D_AACC, 0xF7DA_EC41, 0xFCD7_E54F, 0xE1C0_FE5D, 0xEACD_F753, 0xDBEE_C879, 0xD0E3_C177, 0xCDF4_DA65, 0xC6F9_D36B, 0xAFB2_A431, 0xA4BF_AD3F, 0xB9A8_B62D, 0xB2A5_BF23, 0x8386_8009, 0x888B_8907, 0x959C_9215, 0x9E91_9B1B, 0x470A_7CA1, 0x4C07_75AF, 0x5110_6EBD, 0x5A1D_67B3, 0x6B3E_5899, 0x6033_5197, 0x7D24_4A85, 0x7629_438B, 0x1F62_34D1, 0x146F_3DDF, 0x97826CD, 0x2752FC3, 0x3356_10E9, 0x385B_19E7, 0x254C_02F5, 0x2E41_0BFB, 0x8C61_D79A, 0x876C_DE94, 0x9A7B_C586, 0x9176_CC88, 0xA055_F3A2, 0xAB58_FAAC, 0xB64F_E1BE, 0xBD42_E8B0, 0xD409_9FEA, 0xDF04_96E4, 0xC213_8DF6, 0xC91E_84F8, 0xF83D_BBD2, 0xF330_B2DC, 0xEE27_A9CE, 0xE52A_A0C0, 0x3CB1_477A, 0x37BC_4E74, 0x2AAB_5566, 0x21A6_5C68, 0x1085_6342, 0x1B88_6A4C, 0x69F715E, 0xD927850, 0x64D9_0F0A, 0x6FD4_0604, 0x72C3_1D16, 0x79CE_1418, 0x48ED_2B32, 0x43E0_223C, 0x5EF7_392E, 0x55FA_3020, 0x1B79AEC, 0xABA93E2, 0x17AD_88F0, 0x1CA0_81FE, 0x2D83_BED4, 0x268E_B7DA, 0x3B99_ACC8, 0x3094_A5C6, 0x59DF_D29C, 0x52D2_DB92, 0x4FC5_C080, 0x44C8_C98E, 0x75EB_F6A4, 0x7EE6_FFAA, 0x63F1_E4B8, 0x68FC_EDB6, 0xB167_0A0C, 0xBA6A_0302, 0xA77D_1810, 0xAC70_111E, 0x9D53_2E34, 0x965E_273A, 0x8B49_3C28, 0x8044_3526, 0xE90F_427C, 0xE202_4B72, 0xFF15_5060, 0xF418_596E, 0xC53B_6644, 0xCE36_6F4A, 0xD321_7458, 0xD82C_7D56, 0x7A0C_A137, 0x7101_A839, 0x6C16_B32B, 0x671B_BA25, 0x5638_850F, 0x5D35_8C01, 0x4022_9713, 0x4B2F_9E1D, 0x2264_E947, 0x2969_E049, 0x347E_FB5B, 0x3F73_F255, 0xE50CD7F, 0x55DC471, 0x184A_DF63, 0x1347_D66D, 0xCADC_31D7, 0xC1D1_38D9, 0xDCC6_23CB, 0xD7CB_2AC5, 0xE6E8_15EF, 0xEDE5_1CE1, 0xF0F2_07F3, 0xFBFF_0EFD, 0x92B4_79A7, 0x99B9_70A9, 0x84AE_6BBB, 0x8FA3_62B5, 0xBE80_5D9F, 0xB58D_5491, 0xA89A_4F83, 0xA397_468D]
    private static let U2: [UInt32] = [0x0, 0xD090E0B, 0x1A12_1C16, 0x171B_121D, 0x3424_382C, 0x392D_3627, 0x2E36_243A, 0x233F_2A31, 0x6848_7058, 0x6541_7E53, 0x725A_6C4E, 0x7F53_6245, 0x5C6C_4874, 0x5165_467F, 0x467E_5462, 0x4B77_5A69, 0xD090_E0B0, 0xDD99_EEBB, 0xCA82_FCA6, 0xC78B_F2AD, 0xE4B4_D89C, 0xE9BD_D697, 0xFEA6_C48A, 0xF3AF_CA81, 0xB8D8_90E8, 0xB5D1_9EE3, 0xA2CA_8CFE, 0xAFC3_82F5, 0x8CFC_A8C4, 0x81F5_A6CF, 0x96EE_B4D2, 0x9BE7_BAD9, 0xBB3B_DB7B, 0xB632_D570, 0xA129_C76D, 0xAC20_C966, 0x8F1F_E357, 0x8216_ED5C, 0x950D_FF41, 0x9804_F14A, 0xD373_AB23, 0xDE7A_A528, 0xC961_B735, 0xC468_B93E, 0xE757_930F, 0xEA5E_9D04, 0xFD45_8F19, 0xF04C_8112, 0x6BAB_3BCB, 0x66A2_35C0, 0x71B9_27DD, 0x7CB0_29D6, 0x5F8F_03E7, 0x5286_0DEC, 0x459D_1FF1, 0x4894_11FA, 0x3E34B93, 0xEEA4598, 0x19F1_5785, 0x14F8_598E, 0x37C7_73BF, 0x3ACE_7DB4, 0x2DD5_6FA9, 0x20DC_61A2, 0x6D76_ADF6, 0x607F_A3FD, 0x7764_B1E0, 0x7A6D_BFEB, 0x5952_95DA, 0x545B_9BD1, 0x4340_89CC, 0x4E49_87C7, 0x53EDDAE, 0x837D3A5, 0x1F2C_C1B8, 0x1225_CFB3, 0x311A_E582, 0x3C13_EB89, 0x2B08_F994, 0x2601_F79F, 0xBDE6_4D46, 0xB0EF_434D, 0xA7F4_5150, 0xAAFD_5F5B, 0x89C2_756A, 0x84CB_7B61, 0x93D0_697C, 0x9ED9_6777, 0xD5AE_3D1E, 0xD8A7_3315, 0xCFBC_2108, 0xC2B5_2F03, 0xE18A_0532, 0xEC83_0B39, 0xFB98_1924, 0xF691_172F, 0xD64D_768D, 0xDB44_7886, 0xCC5F_6A9B, 0xC156_6490, 0xE269_4EA1, 0xEF60_40AA, 0xF87B_52B7, 0xF572_5CBC, 0xBE05_06D5, 0xB30C_08DE, 0xA417_1AC3, 0xA91E_14C8, 0x8A21_3EF9, 0x8728_30F2, 0x9033_22EF, 0x9D3A_2CE4, 0x6DD963D, 0xBD49836, 0x1CCF_8A2B, 0x11C6_8420, 0x32F9_AE11, 0x3FF0_A01A, 0x28EB_B207, 0x25E2_BC0C, 0x6E95_E665, 0x639C_E86E, 0x7487_FA73, 0x798E_F478, 0x5AB1_DE49, 0x57B8_D042, 0x40A3_C25F, 0x4DAA_CC54, 0xDAEC_41F7, 0xD7E5_4FFC, 0xC0FE_5DE1, 0xCDF7_53EA, 0xEEC8_79DB, 0xE3C1_77D0, 0xF4DA_65CD, 0xF9D3_6BC6, 0xB2A4_31AF, 0xBFAD_3FA4, 0xA8B6_2DB9, 0xA5BF_23B2, 0x8680_0983, 0x8B89_0788, 0x9C92_1595, 0x919B_1B9E, 0xA7CA147, 0x775AF4C, 0x106E_BD51, 0x1D67_B35A, 0x3E58_996B, 0x3351_9760, 0x244A_857D, 0x2943_8B76, 0x6234_D11F, 0x6F3D_DF14, 0x7826_CD09, 0x752F_C302, 0x5610_E933, 0x5B19_E738, 0x4C02_F525, 0x410B_FB2E, 0x61D7_9A8C, 0x6CDE_9487, 0x7BC5_869A, 0x76CC_8891, 0x55F3_A2A0, 0x58FA_ACAB, 0x4FE1_BEB6, 0x42E8_B0BD, 0x99FEAD4, 0x496E4DF, 0x138D_F6C2, 0x1E84_F8C9, 0x3DBB_D2F8, 0x30B2_DCF3, 0x27A9_CEEE, 0x2AA0_C0E5, 0xB147_7A3C, 0xBC4E_7437, 0xAB55_662A, 0xA65C_6821, 0x8563_4210, 0x886A_4C1B, 0x9F71_5E06, 0x9278_500D, 0xD90F_0A64, 0xD406_046F, 0xC31D_1672, 0xCE14_1879, 0xED2B_3248, 0xE022_3C43, 0xF739_2E5E, 0xFA30_2055, 0xB79A_EC01, 0xBA93_E20A, 0xAD88_F017, 0xA081_FE1C, 0x83BE_D42D, 0x8EB7_DA26, 0x99AC_C83B, 0x94A5_C630, 0xDFD2_9C59, 0xD2DB_9252, 0xC5C0_804F, 0xC8C9_8E44, 0xEBF6_A475, 0xE6FF_AA7E, 0xF1E4_B863, 0xFCED_B668, 0x670A_0CB1, 0x6A03_02BA, 0x7D18_10A7, 0x7011_1EAC, 0x532E_349D, 0x5E27_3A96, 0x493C_288B, 0x4435_2680, 0xF427CE9, 0x24B72E2, 0x1550_60FF, 0x1859_6EF4, 0x3B66_44C5, 0x366F_4ACE, 0x2174_58D3, 0x2C7D_56D8, 0xCA1377A, 0x1A83971, 0x16B3_2B6C, 0x1BBA_2567, 0x3885_0F56, 0x358C_015D, 0x2297_1340, 0x2F9E_1D4B, 0x64E9_4722, 0x69E0_4929, 0x7EFB_5B34, 0x73F2_553F, 0x50CD_7F0E, 0x5DC4_7105, 0x4ADF_6318, 0x47D6_6D13, 0xDC31_D7CA, 0xD138_D9C1, 0xC623_CBDC, 0xCB2A_C5D7, 0xE815_EFE6, 0xE51C_E1ED, 0xF207_F3F0, 0xFF0E_FDFB, 0xB479_A792, 0xB970_A999, 0xAE6B_BB84, 0xA362_B58F, 0x805D_9FBE, 0x8D54_91B5, 0x9A4F_83A8, 0x9746_8DA3]
    private static let U3: [UInt32] = [0x0, 0x90E0B0D, 0x121C_161A, 0x1B12_1D17, 0x2438_2C34, 0x2D36_2739, 0x3624_3A2E, 0x3F2A_3123, 0x4870_5868, 0x417E_5365, 0x5A6C_4E72, 0x5362_457F, 0x6C48_745C, 0x6546_7F51, 0x7E54_6246, 0x775A_694B, 0x90E0_B0D0, 0x99EE_BBDD, 0x82FC_A6CA, 0x8BF2_ADC7, 0xB4D8_9CE4, 0xBDD6_97E9, 0xA6C4_8AFE, 0xAFCA_81F3, 0xD890_E8B8, 0xD19E_E3B5, 0xCA8C_FEA2, 0xC382_F5AF, 0xFCA8_C48C, 0xF5A6_CF81, 0xEEB4_D296, 0xE7BA_D99B, 0x3BDB_7BBB, 0x32D5_70B6, 0x29C7_6DA1, 0x20C9_66AC, 0x1FE3_578F, 0x16ED_5C82, 0xDFF4195, 0x4F14A98, 0x73AB_23D3, 0x7AA5_28DE, 0x61B7_35C9, 0x68B9_3EC4, 0x5793_0FE7, 0x5E9D_04EA, 0x458F_19FD, 0x4C81_12F0, 0xAB3B_CB6B, 0xA235_C066, 0xB927_DD71, 0xB029_D67C, 0x8F03_E75F, 0x860D_EC52, 0x9D1F_F145, 0x9411_FA48, 0xE34B_9303, 0xEA45_980E, 0xF157_8519, 0xF859_8E14, 0xC773_BF37, 0xCE7D_B43A, 0xD56F_A92D, 0xDC61_A220, 0x76AD_F66D, 0x7FA3_FD60, 0x64B1_E077, 0x6DBF_EB7A, 0x5295_DA59, 0x5B9B_D154, 0x4089_CC43, 0x4987_C74E, 0x3EDD_AE05, 0x37D3_A508, 0x2CC1_B81F, 0x25CF_B312, 0x1AE5_8231, 0x13EB_893C, 0x8F9942B, 0x1F79F26, 0xE64D_46BD, 0xEF43_4DB0, 0xF451_50A7, 0xFD5F_5BAA, 0xC275_6A89, 0xCB7B_6184, 0xD069_7C93, 0xD967_779E, 0xAE3D_1ED5, 0xA733_15D8, 0xBC21_08CF, 0xB52F_03C2, 0x8A05_32E1, 0x830B_39EC, 0x9819_24FB, 0x9117_2FF6, 0x4D76_8DD6, 0x4478_86DB, 0x5F6A_9BCC, 0x5664_90C1, 0x694E_A1E2, 0x6040_AAEF, 0x7B52_B7F8, 0x725C_BCF5, 0x506D5BE, 0xC08DEB3, 0x171A_C3A4, 0x1E14_C8A9, 0x213E_F98A, 0x2830_F287, 0x3322_EF90, 0x3A2C_E49D, 0xDD96_3D06, 0xD498_360B, 0xCF8A_2B1C, 0xC684_2011, 0xF9AE_1132, 0xF0A0_1A3F, 0xEBB2_0728, 0xE2BC_0C25, 0x95E6_656E, 0x9CE8_6E63, 0x87FA_7374, 0x8EF4_7879, 0xB1DE_495A, 0xB8D0_4257, 0xA3C2_5F40, 0xAACC_544D, 0xEC41_F7DA, 0xE54F_FCD7, 0xFE5D_E1C0, 0xF753_EACD, 0xC879_DBEE, 0xC177_D0E3, 0xDA65_CDF4, 0xD36B_C6F9, 0xA431_AFB2, 0xAD3F_A4BF, 0xB62D_B9A8, 0xBF23_B2A5, 0x8009_8386, 0x8907_888B, 0x9215_959C, 0x9B1B_9E91, 0x7CA1_470A, 0x75AF_4C07, 0x6EBD_5110, 0x67B3_5A1D, 0x5899_6B3E, 0x5197_6033, 0x4A85_7D24, 0x438B_7629, 0x34D1_1F62, 0x3DDF_146F, 0x26CD_0978, 0x2FC3_0275, 0x10E9_3356, 0x19E7_385B, 0x2F5254C, 0xBFB2E41, 0xD79A_8C61, 0xDE94_876C, 0xC586_9A7B, 0xCC88_9176, 0xF3A2_A055, 0xFAAC_AB58, 0xE1BE_B64F, 0xE8B0_BD42, 0x9FEA_D409, 0x96E4_DF04, 0x8DF6_C213, 0x84F8_C91E, 0xBBD2_F83D, 0xB2DC_F330, 0xA9CE_EE27, 0xA0C0_E52A, 0x477A_3CB1, 0x4E74_37BC, 0x5566_2AAB, 0x5C68_21A6, 0x6342_1085, 0x6A4C_1B88, 0x715E_069F, 0x7850_0D92, 0xF0A64D9, 0x6046FD4, 0x1D16_72C3, 0x1418_79CE, 0x2B32_48ED, 0x223C_43E0, 0x392E_5EF7, 0x3020_55FA, 0x9AEC_01B7, 0x93E2_0ABA, 0x88F0_17AD, 0x81FE_1CA0, 0xBED4_2D83, 0xB7DA_268E, 0xACC8_3B99, 0xA5C6_3094, 0xD29C_59DF, 0xDB92_52D2, 0xC080_4FC5, 0xC98E_44C8, 0xF6A4_75EB, 0xFFAA_7EE6, 0xE4B8_63F1, 0xEDB6_68FC, 0xA0CB167, 0x302BA6A, 0x1810_A77D, 0x111E_AC70, 0x2E34_9D53, 0x273A_965E, 0x3C28_8B49, 0x3526_8044, 0x427C_E90F, 0x4B72_E202, 0x5060_FF15, 0x596E_F418, 0x6644_C53B, 0x6F4A_CE36, 0x7458_D321, 0x7D56_D82C, 0xA137_7A0C, 0xA839_7101, 0xB32B_6C16, 0xBA25_671B, 0x850F_5638, 0x8C01_5D35, 0x9713_4022, 0x9E1D_4B2F, 0xE947_2264, 0xE049_2969, 0xFB5B_347E, 0xF255_3F73, 0xCD7F_0E50, 0xC471_055D, 0xDF63_184A, 0xD66D_1347, 0x31D7_CADC, 0x38D9_C1D1, 0x23CB_DCC6, 0x2AC5_D7CB, 0x15EF_E6E8, 0x1CE1_EDE5, 0x7F3F0F2, 0xEFDFBFF, 0x79A7_92B4, 0x70A9_99B9, 0x6BBB_84AE, 0x62B5_8FA3, 0x5D9F_BE80, 0x5491_B58D, 0x4F83_A89A, 0x468D_A397]
    private static let U4: [UInt32] = [0x0, 0xE0B0D09, 0x1C16_1A12, 0x121D_171B, 0x382C_3424, 0x3627_392D, 0x243A_2E36, 0x2A31_233F, 0x7058_6848, 0x7E53_6541, 0x6C4E_725A, 0x6245_7F53, 0x4874_5C6C, 0x467F_5165, 0x5462_467E, 0x5A69_4B77, 0xE0B0_D090, 0xEEBB_DD99, 0xFCA6_CA82, 0xF2AD_C78B, 0xD89C_E4B4, 0xD697_E9BD, 0xC48A_FEA6, 0xCA81_F3AF, 0x90E8_B8D8, 0x9EE3_B5D1, 0x8CFE_A2CA, 0x82F5_AFC3, 0xA8C4_8CFC, 0xA6CF_81F5, 0xB4D2_96EE, 0xBAD9_9BE7, 0xDB7B_BB3B, 0xD570_B632, 0xC76D_A129, 0xC966_AC20, 0xE357_8F1F, 0xED5C_8216, 0xFF41_950D, 0xF14A_9804, 0xAB23_D373, 0xA528_DE7A, 0xB735_C961, 0xB93E_C468, 0x930F_E757, 0x9D04_EA5E, 0x8F19_FD45, 0x8112_F04C, 0x3BCB_6BAB, 0x35C0_66A2, 0x27DD_71B9, 0x29D6_7CB0, 0x3E75F8F, 0xDEC5286, 0x1FF1_459D, 0x11FA_4894, 0x4B93_03E3, 0x4598_0EEA, 0x5785_19F1, 0x598E_14F8, 0x73BF_37C7, 0x7DB4_3ACE, 0x6FA9_2DD5, 0x61A2_20DC, 0xADF6_6D76, 0xA3FD_607F, 0xB1E0_7764, 0xBFEB_7A6D, 0x95DA_5952, 0x9BD1_545B, 0x89CC_4340, 0x87C7_4E49, 0xDDAE_053E, 0xD3A5_0837, 0xC1B8_1F2C, 0xCFB3_1225, 0xE582_311A, 0xEB89_3C13, 0xF994_2B08, 0xF79F_2601, 0x4D46_BDE6, 0x434D_B0EF, 0x5150_A7F4, 0x5F5B_AAFD, 0x756A_89C2, 0x7B61_84CB, 0x697C_93D0, 0x6777_9ED9, 0x3D1E_D5AE, 0x3315_D8A7, 0x2108_CFBC, 0x2F03_C2B5, 0x532E18A, 0xB39EC83, 0x1924_FB98, 0x172F_F691, 0x768D_D64D, 0x7886_DB44, 0x6A9B_CC5F, 0x6490_C156, 0x4EA1_E269, 0x40AA_EF60, 0x52B7_F87B, 0x5CBC_F572, 0x6D5BE05, 0x8DEB30C, 0x1AC3_A417, 0x14C8_A91E, 0x3EF9_8A21, 0x30F2_8728, 0x22EF_9033, 0x2CE4_9D3A, 0x963D_06DD, 0x9836_0BD4, 0x8A2B_1CCF, 0x8420_11C6, 0xAE11_32F9, 0xA01A_3FF0, 0xB207_28EB, 0xBC0C_25E2, 0xE665_6E95, 0xE86E_639C, 0xFA73_7487, 0xF478_798E, 0xDE49_5AB1, 0xD042_57B8, 0xC25F_40A3, 0xCC54_4DAA, 0x41F7_DAEC, 0x4FFC_D7E5, 0x5DE1_C0FE, 0x53EA_CDF7, 0x79DB_EEC8, 0x77D0_E3C1, 0x65CD_F4DA, 0x6BC6_F9D3, 0x31AF_B2A4, 0x3FA4_BFAD, 0x2DB9_A8B6, 0x23B2_A5BF, 0x9838680, 0x7888B89, 0x1595_9C92, 0x1B9E_919B, 0xA147_0A7C, 0xAF4C_0775, 0xBD51_106E, 0xB35A_1D67, 0x996B_3E58, 0x9760_3351, 0x857D_244A, 0x8B76_2943, 0xD11F_6234, 0xDF14_6F3D, 0xCD09_7826, 0xC302_752F, 0xE933_5610, 0xE738_5B19, 0xF525_4C02, 0xFB2E_410B, 0x9A8C_61D7, 0x9487_6CDE, 0x869A_7BC5, 0x8891_76CC, 0xA2A0_55F3, 0xACAB_58FA, 0xBEB6_4FE1, 0xB0BD_42E8, 0xEAD4_099F, 0xE4DF_0496, 0xF6C2_138D, 0xF8C9_1E84, 0xD2F8_3DBB, 0xDCF3_30B2, 0xCEEE_27A9, 0xC0E5_2AA0, 0x7A3C_B147, 0x7437_BC4E, 0x662A_AB55, 0x6821_A65C, 0x4210_8563, 0x4C1B_886A, 0x5E06_9F71, 0x500D_9278, 0xA64D90F, 0x46FD406, 0x1672_C31D, 0x1879_CE14, 0x3248_ED2B, 0x3C43_E022, 0x2E5E_F739, 0x2055_FA30, 0xEC01_B79A, 0xE20A_BA93, 0xF017_AD88, 0xFE1C_A081, 0xD42D_83BE, 0xDA26_8EB7, 0xC83B_99AC, 0xC630_94A5, 0x9C59_DFD2, 0x9252_D2DB, 0x804F_C5C0, 0x8E44_C8C9, 0xA475_EBF6, 0xAA7E_E6FF, 0xB863_F1E4, 0xB668_FCED, 0xCB1670A, 0x2BA6A03, 0x10A7_7D18, 0x1EAC_7011, 0x349D_532E, 0x3A96_5E27, 0x288B_493C, 0x2680_4435, 0x7CE9_0F42, 0x72E2_024B, 0x60FF_1550, 0x6EF4_1859, 0x44C5_3B66, 0x4ACE_366F, 0x58D3_2174, 0x56D8_2C7D, 0x377A_0CA1, 0x3971_01A8, 0x2B6C_16B3, 0x2567_1BBA, 0xF563885, 0x15D358C, 0x1340_2297, 0x1D4B_2F9E, 0x4722_64E9, 0x4929_69E0, 0x5B34_7EFB, 0x553F_73F2, 0x7F0E_50CD, 0x7105_5DC4, 0x6318_4ADF, 0x6D13_47D6, 0xD7CA_DC31, 0xD9C1_D138, 0xCBDC_C623, 0xC5D7_CB2A, 0xEFE6_E815, 0xE1ED_E51C, 0xF3F0_F207, 0xFDFB_FF0E, 0xA792_B479, 0xA999_B970, 0xBB84_AE6B, 0xB58F_A362, 0x9FBE_805D, 0x91B5_8D54, 0x83A8_9A4F, 0x8DA3_9746]

    /// Initialize AES with variant calculated out of key length:
    /// - 16 bytes (AES-128)
    /// - 24 bytes (AES-192)
    /// - 32 bytes (AES-256)
    ///
    /// - parameter key:       Key. Length of the key decides on AES variant.
    /// - parameter iv:        Initialization Vector (Optional for some blockMode values)
    /// - parameter blockMode: Cipher mode of operation
    /// - parameter padding:   Padding method. .pkcs7, .noPadding, .zeroPadding, ...
    ///
    /// - throws: AES.Error
    ///
    /// - returns: Instance
    public init(key: [UInt8], blockMode: BlockMode, padding: Padding = .pkcs7) throws {
        self.key = Key(bytes: key)
        self.blockMode = blockMode
        self.padding = padding
        keySize = self.key.count

        // Validate key size
        switch keySize * 8 {
        case 128:
            variant = .aes128
        case 192:
            variant = .aes192
        case 256:
            variant = .aes256
        default:
            throw Error.invalidKeySize
        }

        variantNb = variant.Nb
        variantNk = variant.Nk
        variantNr = variant.Nr
    }

    internal func encrypt(block: ArraySlice<UInt8>) -> [UInt8]? {
        if blockMode.options.contains(.paddingRequired), block.count != AES.blockSize {
            return Array(block)
        }

        let rounds = variantNr
        let rk = expandedKey

        let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
        let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
        let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
        let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
        var b0 = b00 | b01 | b02 | b03

        let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
        let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
        let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
        let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
        var b1 = b10 | b11 | b12 | b13

        let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
        let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
        let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
        let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
        var b2 = b20 | b21 | b22 | b23

        let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
        let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
        let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
        let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
        var b3 = b30 | b31 | b32 | b33

        let tLength = 4
        let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
        t.initialize(repeating: 0, count: tLength)
        defer {
            t.deinitialize(count: tLength)
            t.deallocate()
        }

        for r in 0 ..< rounds - 1 {
            t[0] = b0 ^ rk[r][0]
            t[1] = b1 ^ rk[r][1]
            t[2] = b2 ^ rk[r][2]
            t[3] = b3 ^ rk[r][3]

            let lb00 = AES.T0[Int(t[0] & 0xFF)]
            let lb01 = AES.T1[Int((t[1] >> 8) & 0xFF)]
            let lb02 = AES.T2[Int((t[2] >> 16) & 0xFF)]
            let lb03 = AES.T3[Int(t[3] >> 24)]
            b0 = lb00 ^ lb01 ^ lb02 ^ lb03

            let lb10 = AES.T0[Int(t[1] & 0xFF)]
            let lb11 = AES.T1[Int((t[2] >> 8) & 0xFF)]
            let lb12 = AES.T2[Int((t[3] >> 16) & 0xFF)]
            let lb13 = AES.T3[Int(t[0] >> 24)]
            b1 = lb10 ^ lb11 ^ lb12 ^ lb13

            let lb20 = AES.T0[Int(t[2] & 0xFF)]
            let lb21 = AES.T1[Int((t[3] >> 8) & 0xFF)]
            let lb22 = AES.T2[Int((t[0] >> 16) & 0xFF)]
            let lb23 = AES.T3[Int(t[1] >> 24)]
            b2 = lb20 ^ lb21 ^ lb22 ^ lb23

            let lb30 = AES.T0[Int(t[3] & 0xFF)]
            let lb31 = AES.T1[Int((t[0] >> 8) & 0xFF)]
            let lb32 = AES.T2[Int((t[1] >> 16) & 0xFF)]
            let lb33 = AES.T3[Int(t[2] >> 24)]
            b3 = lb30 ^ lb31 ^ lb32 ^ lb33
        }

        // last round
        let r = rounds - 1

        t[0] = b0 ^ rk[r][0]
        t[1] = b1 ^ rk[r][1]
        t[2] = b2 ^ rk[r][2]
        t[3] = b3 ^ rk[r][3]

        // rounds
        b0 = F1(t[0], t[1], t[2], t[3]) ^ rk[rounds][0]
        b1 = F1(t[1], t[2], t[3], t[0]) ^ rk[rounds][1]
        b2 = F1(t[2], t[3], t[0], t[1]) ^ rk[rounds][2]
        b3 = F1(t[3], t[0], t[1], t[2]) ^ rk[rounds][3]

        let encrypted: [UInt8] = [
            UInt8(b0 & 0xFF), UInt8((b0 >> 8) & 0xFF), UInt8((b0 >> 16) & 0xFF), UInt8((b0 >> 24) & 0xFF),
            UInt8(b1 & 0xFF), UInt8((b1 >> 8) & 0xFF), UInt8((b1 >> 16) & 0xFF), UInt8((b1 >> 24) & 0xFF),
            UInt8(b2 & 0xFF), UInt8((b2 >> 8) & 0xFF), UInt8((b2 >> 16) & 0xFF), UInt8((b2 >> 24) & 0xFF),
            UInt8(b3 & 0xFF), UInt8((b3 >> 8) & 0xFF), UInt8((b3 >> 16) & 0xFF), UInt8((b3 >> 24) & 0xFF),
        ]
        return encrypted
    }

    internal func decrypt(block: ArraySlice<UInt8>) -> [UInt8]? {
        if blockMode.options.contains(.paddingRequired), block.count != AES.blockSize {
            return Array(block)
        }

        let rounds = variantNr
        let rk = expandedKeyInv

        // Save miliseconds by not using `block.toUInt32Array()`
        let b00 = UInt32(block[block.startIndex.advanced(by: 0)])
        let b01 = UInt32(block[block.startIndex.advanced(by: 1)]) << 8
        let b02 = UInt32(block[block.startIndex.advanced(by: 2)]) << 16
        let b03 = UInt32(block[block.startIndex.advanced(by: 3)]) << 24
        var b0 = b00 | b01 | b02 | b03

        let b10 = UInt32(block[block.startIndex.advanced(by: 4)])
        let b11 = UInt32(block[block.startIndex.advanced(by: 5)]) << 8
        let b12 = UInt32(block[block.startIndex.advanced(by: 6)]) << 16
        let b13 = UInt32(block[block.startIndex.advanced(by: 7)]) << 24
        var b1 = b10 | b11 | b12 | b13

        let b20 = UInt32(block[block.startIndex.advanced(by: 8)])
        let b21 = UInt32(block[block.startIndex.advanced(by: 9)]) << 8
        let b22 = UInt32(block[block.startIndex.advanced(by: 10)]) << 16
        let b23 = UInt32(block[block.startIndex.advanced(by: 11)]) << 24
        var b2 = b20 | b21 | b22 | b23

        let b30 = UInt32(block[block.startIndex.advanced(by: 12)])
        let b31 = UInt32(block[block.startIndex.advanced(by: 13)]) << 8
        let b32 = UInt32(block[block.startIndex.advanced(by: 14)]) << 16
        let b33 = UInt32(block[block.startIndex.advanced(by: 15)]) << 24
        var b3 = b30 | b31 | b32 | b33

        let tLength = 4
        let t = UnsafeMutablePointer<UInt32>.allocate(capacity: tLength)
        t.initialize(repeating: 0, count: tLength)
        defer {
            t.deinitialize(count: tLength)
            t.deallocate()
        }

        for r in (2 ... rounds).reversed() {
            t[0] = b0 ^ rk[r][0]
            t[1] = b1 ^ rk[r][1]
            t[2] = b2 ^ rk[r][2]
            t[3] = b3 ^ rk[r][3]

            let b00 = AES.T0_INV[Int(t[0] & 0xFF)]
            let b01 = AES.T1_INV[Int((t[3] >> 8) & 0xFF)]
            let b02 = AES.T2_INV[Int((t[2] >> 16) & 0xFF)]
            let b03 = AES.T3_INV[Int(t[1] >> 24)]
            b0 = b00 ^ b01 ^ b02 ^ b03

            let b10 = AES.T0_INV[Int(t[1] & 0xFF)]
            let b11 = AES.T1_INV[Int((t[0] >> 8) & 0xFF)]
            let b12 = AES.T2_INV[Int((t[3] >> 16) & 0xFF)]
            let b13 = AES.T3_INV[Int(t[2] >> 24)]
            b1 = b10 ^ b11 ^ b12 ^ b13

            let b20 = AES.T0_INV[Int(t[2] & 0xFF)]
            let b21 = AES.T1_INV[Int((t[1] >> 8) & 0xFF)]
            let b22 = AES.T2_INV[Int((t[0] >> 16) & 0xFF)]
            let b23 = AES.T3_INV[Int(t[3] >> 24)]
            b2 = b20 ^ b21 ^ b22 ^ b23

            let b30 = AES.T0_INV[Int(t[3] & 0xFF)]
            let b31 = AES.T1_INV[Int((t[2] >> 8) & 0xFF)]
            let b32 = AES.T2_INV[Int((t[1] >> 16) & 0xFF)]
            let b33 = AES.T3_INV[Int(t[0] >> 24)]
            b3 = b30 ^ b31 ^ b32 ^ b33
        }

        // last round
        t[0] = b0 ^ rk[1][0]
        t[1] = b1 ^ rk[1][1]
        t[2] = b2 ^ rk[1][2]
        t[3] = b3 ^ rk[1][3]

        // rounds

        let lb00 = sBoxInv[Int(B0(t[0]))]
        let lb01 = (sBoxInv[Int(B1(t[3]))] << 8)
        let lb02 = (sBoxInv[Int(B2(t[2]))] << 16)
        let lb03 = (sBoxInv[Int(B3(t[1]))] << 24)
        b0 = lb00 | lb01 | lb02 | lb03 ^ rk[0][0]

        let lb10 = sBoxInv[Int(B0(t[1]))]
        let lb11 = (sBoxInv[Int(B1(t[0]))] << 8)
        let lb12 = (sBoxInv[Int(B2(t[3]))] << 16)
        let lb13 = (sBoxInv[Int(B3(t[2]))] << 24)
        b1 = lb10 | lb11 | lb12 | lb13 ^ rk[0][1]

        let lb20 = sBoxInv[Int(B0(t[2]))]
        let lb21 = (sBoxInv[Int(B1(t[1]))] << 8)
        let lb22 = (sBoxInv[Int(B2(t[0]))] << 16)
        let lb23 = (sBoxInv[Int(B3(t[3]))] << 24)
        b2 = lb20 | lb21 | lb22 | lb23 ^ rk[0][2]

        let lb30 = sBoxInv[Int(B0(t[3]))]
        let lb31 = (sBoxInv[Int(B1(t[2]))] << 8)
        let lb32 = (sBoxInv[Int(B2(t[1]))] << 16)
        let lb33 = (sBoxInv[Int(B3(t[0]))] << 24)
        b3 = lb30 | lb31 | lb32 | lb33 ^ rk[0][3]

        let result: [UInt8] = [
            UInt8(b0 & 0xFF), UInt8((b0 >> 8) & 0xFF), UInt8((b0 >> 16) & 0xFF), UInt8((b0 >> 24) & 0xFF),
            UInt8(b1 & 0xFF), UInt8((b1 >> 8) & 0xFF), UInt8((b1 >> 16) & 0xFF), UInt8((b1 >> 24) & 0xFF),
            UInt8(b2 & 0xFF), UInt8((b2 >> 8) & 0xFF), UInt8((b2 >> 16) & 0xFF), UInt8((b2 >> 24) & 0xFF),
            UInt8(b3 & 0xFF), UInt8((b3 >> 8) & 0xFF), UInt8((b3 >> 16) & 0xFF), UInt8((b3 >> 24) & 0xFF),
        ]
        return result
    }
}

private extension AES {
    private func expandKeyInv(_ key: Key, variant: Variant) -> [[UInt32]] {
        let rounds = variantNr
        var rk2: [[UInt32]] = expandKey(key, variant: variant)

        for r in 1 ..< rounds {
            for i in 0 ..< 4 {
                let w = rk2[r][i]
                let u1 = AES.U1[Int(B0(w))]
                let u2 = AES.U2[Int(B1(w))]
                let u3 = AES.U3[Int(B2(w))]
                let u4 = AES.U4[Int(B3(w))]
                rk2[r][i] = u1 ^ u2 ^ u3 ^ u4
            }
        }

        return rk2
    }

    private func expandKey(_ key: Key, variant _: Variant) -> [[UInt32]] {
        func convertExpandedKey(_ expanded: [UInt8]) -> [[UInt32]] {
            expanded.batched(by: 4).map { UInt32(bytes: $0.reversed()) }.batched(by: 4).map { Array($0) }
        }

        /*
         * Function used in the Key Expansion routine that takes a four-byte
         * input word and applies an S-box to each of the four bytes to
         * produce an output word.
         */
        func subWord(_ word: [UInt8]) -> [UInt8] {
            precondition(word.count == 4)

            var result = word
            for i in 0 ..< 4 {
                result[i] = UInt8(sBox[Int(word[i])])
            }
            return result
        }

        @inline(__always)
        func subWordInPlace(_ word: inout [UInt8]) {
            precondition(word.count == 4)
            word[0] = UInt8(sBox[Int(word[0])])
            word[1] = UInt8(sBox[Int(word[1])])
            word[2] = UInt8(sBox[Int(word[2])])
            word[3] = UInt8(sBox[Int(word[3])])
        }

        let wLength = variantNb * (variantNr + 1) * 4
        let w = UnsafeMutablePointer<UInt8>.allocate(capacity: wLength)
        w.initialize(repeating: 0, count: wLength)
        defer {
            w.deinitialize(count: wLength)
            w.deallocate()
        }

        for i in 0 ..< variantNk {
            for wordIdx in 0 ..< 4 {
                w[(4 * i) + wordIdx] = key[(4 * i) + wordIdx]
            }
        }

        var tmp: [UInt8]

        for i in variantNk ..< variantNb * (variantNr + 1) {
            tmp = [UInt8](repeating: 0, count: 4)

            for wordIdx in 0 ..< 4 {
                tmp[wordIdx] = w[4 * (i - 1) + wordIdx]
            }
            if (i % variantNk) == 0 {
                tmp = subWord(rotateLeft(UInt32(bytes: tmp), by: 8).bytes(totalBytes: 4))
                tmp[0] = tmp.first! ^ AES.Rcon[i / variantNk]
            } else if variantNk > 6, (i % variantNk) == 4 {
                subWordInPlace(&tmp)
            }

            // xor array of bytes
            for wordIdx in 0 ..< 4 {
                w[4 * i + wordIdx] = w[4 * (i - variantNk) + wordIdx] ^ tmp[wordIdx]
            }
        }
        return convertExpandedKey(Array(UnsafeBufferPointer(start: w, count: wLength)))
    }

    @inline(__always)
    private func B0(_ x: UInt32) -> UInt32 {
        x & 0xFF
    }

    @inline(__always)
    private func B1(_ x: UInt32) -> UInt32 {
        (x >> 8) & 0xFF
    }

    @inline(__always)
    private func B2(_ x: UInt32) -> UInt32 {
        (x >> 16) & 0xFF
    }

    @inline(__always)
    private func B3(_ x: UInt32) -> UInt32 {
        (x >> 24) & 0xFF
    }

    @inline(__always)
    private func F1(_ x0: UInt32, _ x1: UInt32, _ x2: UInt32, _ x3: UInt32) -> UInt32 {
        var result: UInt32 = 0
        result |= UInt32(B1(AES.T0[Int(x0 & 255)]))
        result |= UInt32(B1(AES.T0[Int((x1 >> 8) & 255)])) << 8
        result |= UInt32(B1(AES.T0[Int((x2 >> 16) & 255)])) << 16
        result |= UInt32(B1(AES.T0[Int(x3 >> 24)])) << 24
        return result
    }

    private func calculateSBox() -> (sBox: [UInt32], invSBox: [UInt32]) {
        let sboxLength = 256
        let sbox = UnsafeMutablePointer<UInt32>.allocate(capacity: sboxLength)
        let invsbox = UnsafeMutablePointer<UInt32>.allocate(capacity: sboxLength)
        sbox.initialize(repeating: 0, count: sboxLength)
        invsbox.initialize(repeating: 0, count: sboxLength)
        defer {
            sbox.deinitialize(count: sboxLength)
            sbox.deallocate()
            invsbox.deinitialize(count: sboxLength)
            invsbox.deallocate()
        }

        sbox[0] = 0x63

        var p: UInt8 = 1, q: UInt8 = 1

        repeat {
            p = p ^ (UInt8(truncatingIfNeeded: Int(p) << 1) ^ ((p & 0x80) == 0x80 ? 0x1B : 0))
            q ^= q << 1
            q ^= q << 2
            q ^= q << 4
            q ^= (q & 0x80) == 0x80 ? 0x09 : 0

            let s = 0x63 ^ q ^ rotateLeft(q, by: 1) ^ rotateLeft(q, by: 2) ^ rotateLeft(q, by: 3) ^ rotateLeft(q, by: 4)

            sbox[Int(p)] = UInt32(s)
            invsbox[Int(s)] = UInt32(p)
        } while p != 1

        return (sBox: Array(UnsafeBufferPointer(start: sbox, count: sboxLength)), invSBox: Array(UnsafeBufferPointer(start: invsbox, count: sboxLength)))
    }
}

// MARK: Cipher

extension AES: Cipher {
    public func encrypt(_ bytes: ArraySlice<UInt8>) throws -> [UInt8] {
        let chunks = bytes.batched(by: AES.blockSize)

        var oneTimeCryptor = try makeEncryptor()
        var out = [UInt8](reserveCapacity: bytes.count)
        for chunk in chunks {
            out += try oneTimeCryptor.update(withBytes: chunk, isLast: false)
        }
        // Padding may be added at the very end
        out += try oneTimeCryptor.finish()

        if blockMode.options.contains(.paddingRequired), out.count % AES.blockSize != 0 {
            throw Error.dataPaddingRequired
        }

        return out
    }

    public func decrypt(_ bytes: ArraySlice<UInt8>) throws -> [UInt8] {
        if blockMode.options.contains(.paddingRequired), bytes.count % AES.blockSize != 0 {
            throw Error.dataPaddingRequired
        }

        var oneTimeCryptor = try makeDecryptor()
        let chunks = bytes.batched(by: AES.blockSize)
        if chunks.isEmpty {
            throw Error.invalidData
        }

        var out = [UInt8](reserveCapacity: bytes.count)

        var lastIdx = chunks.startIndex
        chunks.indices.formIndex(&lastIdx, offsetBy: chunks.count - 1)

        // To properly remove padding, `isLast` has to be known when called with the last chunk of ciphertext
        // Last chunk of ciphertext may contains padded data so next call to update(..) won't be able to remove it
        for idx in chunks.indices {
            out += try oneTimeCryptor.update(withBytes: chunks[idx], isLast: idx == lastIdx)
        }
        return out
    }
}
